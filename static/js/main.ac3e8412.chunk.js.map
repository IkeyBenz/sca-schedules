{"version":3,"sources":["ui/assets/SCALogo.png","util.ts","ui/components/ScheduleCard.tsx","ui/components/SpreadSheetDropBox.tsx","ui/components/ImageDropBox.tsx","ui/components/LiveItems.tsx","ui/components/Header.tsx","ui/screens/Home.tsx","ui/screens/Admin.tsx","service/ScheduleService.ts","service/DatabaseService.ts","service/index.ts","factory/HomeScreenCreator.tsx","factory/AdminScreenCreator.tsx","AppNavigator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","cleanExcelData","d","map","rows","col","string","data","Date","moment","format","adjustExcelTime","convertJsonToArrayWithIds","obj","Object","entries","_id","val","getColumnIdxOfKey","key","colIndex","findIndex","currKey","toLowerCase","includes","undefined","SmartText","input","highlight","urls","linkify","length","className","value","type","href","ScheduleCard","schedule","filter","title","logo","filteredRows","filterType","filterVal","header","searchableColIndex","slice","row","cellText","replace","concat","filterDataFrameRows","match","filterColIdx","shouldHighlight","colText","colIdx","text","src","idx","rIdx","cIdx","SpreadSheetDropBox","onSpreadSheetDropped","currentSpreadSheet","useState","droppedFileName","setDroppedFileName","dataRows","setDataRows","useEffect","useDropzone","onDrop","files","excelFile","file","test","name","alert","Promise","resolve","reader","FileReader","onload","e","target","result","workbook","xlsx","read","spreadSheet","Sheets","SheetNames","rowObjs","utils","sheet_to_json","keys","readAsArrayBuffer","then","getRootProps","getInputProps","isDragActive","ImageDropBox","onImageDropped","currentImage","previewImage","setPreviewImage","image","onloadend","readAsDataURL","base64URL","LiveItems","schedules","push","headerRows","days","now","filteredByTime","flag","rowDays","getDay","split","forEach","rowDay","leftRight","left","indexOf","right","rowTimes","startTime","endTime","add","subtract","isBetween","rowId","cell","cellId","Header","props","SCALogo","alt","height","HomeScreen","setfilterType","setFilterVal","htmlFor","onChange","id","placeholder","SchedulePreviewItem","isEditing","onUpdateBtnPressed","onDeleteBtnPressed","onClick","AdminScreen","createSchedule","deleteSchedule","updateSchedule","scheduleBeingEdited","setScheduleBeingEdited","updateScheduleBeingEdited","updates","console","log","newSchedule","ScheduleService","database","storage","this","delete","write","findAll","_alphabetize","cb","sort","a","b","createScheduleManager","persistedStorage","FirebaseManager","config","db","app","firebase","initializeApp","path","ref","once","s","set","basePath","remove","on","createFirebaseDbManager","scheduleManager","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","HomeScreenCreator","setSchedules","onSchedulesChanged","Home","AdminScreenCreator","currentSchedules","setCurrentSchedules","Admin","addSchedule","updatedSchedule","removeSchedule","AppNavigator","exact","component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ac3e8412.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SCALogo.b2d06419.png\";","import moment from 'moment';\nimport xlsx from 'xlsx';\n\nimport { DataFrame } from './types';\n\nexport const dataframeFromExcelFile = (excelFile: File) =>\n  new Promise<DataFrame>(resolve => {\n    var reader = new FileReader();\n\n    reader.onload = function(e) {\n      const data = e.target.result;\n      const workbook = xlsx.read(data, { type: 'array' });\n      const spreadSheet = workbook.Sheets[workbook.SheetNames[0]];\n\n      const rowObjs = xlsx.utils.sheet_to_json(spreadSheet);\n      const header = Object.keys(rowObjs[0]);\n      const rows: DataFrame = [header].concat(\n        rowObjs.map(obj => header.map(key => obj[key])),\n      );\n      resolve(cleanExcelData(rows));\n    };\n\n    reader.readAsArrayBuffer(excelFile);\n  });\n\nexport const convertImageFileToBase64Str = (image: File) => \n  new Promise<string | ArrayBuffer>(resolve => {\n    const reader = new FileReader();\n    reader.onloadend = function (e) {\n      resolve(e.target.result);\n    }\n    reader.readAsDataURL(image);\n  });\n    \n\nexport const adjustExcelTime = string => {\n    if (typeof string === 'string') return string;\n    const timeInMiliSeconds = (string - (25567 + 1)) * 86400 * 1000;\n    const fiveHours = 1000 * 60 * 60 * 5;\n    const data = new Date(timeInMiliSeconds + fiveHours);\n    return moment(data).format('LT');\n};\n\nexport const cleanExcelData = (d: DataFrame) => \n    d.map(rows => rows.map(col => adjustExcelTime(col)));\n\n\nexport const convertJsonToArrayWithIds = (obj: object) =>\n    Object.entries(obj).map(([_id, val]) => ({ _id, ...val }));\n\nexport const filterDataFrameRows = (filterType: string, filterVal: string, data: DataFrame) => {\n    const header = [...data[0]];\n    const searchableColIndex = getColumnIdxOfKey(data, filterType);\n    if (searchableColIndex === -1) { // This table doesn't have a column for specified filterType\n        return [header];\n    }\n    const filteredRows = data.slice(1).filter(row => {\n        let cellText = row[searchableColIndex];\n        if (filterType === 'time') cellText = cellText.replace(':', '');\n        return cellText.toLowerCase().includes(filterVal.toLowerCase());\n    });\n    return [header].concat(filteredRows);\n}\n\nexport const getColumnIdxOfKey = (data: DataFrame, key: string) => {\n  const colIndex = data[0].findIndex(currKey =>\n    currKey.toLowerCase().includes(key.toLowerCase())\n  );\n  return colIndex !== -1 ? colIndex : undefined;\n}","import React from 'react';\n\nimport * as linkify from 'linkifyjs';\nimport { Schedule } from '../../types';\nimport { filterDataFrameRows } from '../../util';\n\ninterface ScheduleCardProps {\n  schedule: Schedule;\n  filter?: {\n    /** The column in the header to look for */\n    type: string;\n    /** The string to compare cells with */\n    match: string;\n  };\n  stringToHighlight?: string;\n}\n\ninterface SmartTextProps {\n  input: string;\n  highlight?: boolean;\n}\n/** If input contains a link, SmartText will replace it with a clickable ancor tag */\nconst SmartText: React.FC<SmartTextProps> = ({ input, highlight }) => {\n  const urls = linkify.find(input);\n  if (urls.length === 0) {\n    return <p className={highlight && 'highlight'}>{input}</p>;\n  }\n  const { value, type } = urls[0];\n  return <a href={value}>{type === 'url' ? 'Click here' : value}</a>;\n};\n\nconst ScheduleCard: React.FC<ScheduleCardProps> = ({ schedule, filter }) => {\n  const { title, rows, logo } = schedule;\n\n  const filteredRows = filter\n    ? filterDataFrameRows(filter.type, filter.match, rows)\n    : rows;\n\n  if (filteredRows.length === 1) {\n    // No rows matched the filter criteria\n    return null;\n  }\n\n  const filterColIdx =\n    filter && rows[0].findIndex(col => col.toLowerCase().includes(filter.type));\n\n  const shouldHighlight = (colText: string, colIdx) => {\n    const text = colText.toLowerCase();\n    return filterColIdx === colIdx\n      ? filter.type === 'time'\n        ? text.replace(':', '').includes(filter.match)\n        : text.includes(filter.match)\n      : false;\n  };\n\n  return (\n    <div className=\"schedule-card my-5\">\n      <div className=\"card-header\">\n        {!!logo && (\n          <div className=\"w-100\">\n            <img src={logo} className=\"logo ml-4\" />\n          </div>\n        )}\n        <h1 className=\"schedule-title\">{title}</h1>\n      </div>\n      <table className=\"table table-striped table-bordered table-hover shadow\">\n        <thead className=\"text-light\">\n          <tr>\n            {filteredRows[0].map((col, idx) => (\n              <th key={idx}>{col}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {filteredRows.slice(1).map((row, rIdx) => (\n            <tr key={rIdx}>\n              {row.map((col, cIdx) => (\n                <td key={cIdx}>\n                  <SmartText\n                    input={col}\n                    highlight={shouldHighlight(col, cIdx)}\n                  />\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default ScheduleCard;\n","import React, { useCallback, useState, useEffect } from 'react';\nimport { useDropzone } from 'react-dropzone';\n\nimport { DataFrame } from '../../types';\nimport { dataframeFromExcelFile } from '../../util';\n\nimport ScheduleCard from './ScheduleCard';\n\ninterface SpreadSheetDropBoxProps {\n  onSpreadSheetDropped: (data: DataFrame) => void;\n  currentSpreadSheet?: DataFrame;\n}\n\nconst SpreadSheetDropBox: React.FC<SpreadSheetDropBoxProps> = ({\n  onSpreadSheetDropped,\n  currentSpreadSheet,\n}) => {\n  const [droppedFileName, setDroppedFileName] = useState(undefined);\n  const [dataRows, setDataRows] = useState<DataFrame>(undefined);\n\n  useEffect(() => setDataRows(currentSpreadSheet), [currentSpreadSheet]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop: (files: File[]) => {\n      const file = files[0];\n      const excelExt = /^([a-zA-Z0-9\\s_\\\\.\\-:])+(.xls|.xlsx)$/;\n      if (!excelExt.test(file.name.toLowerCase())) {\n        return alert(\n          'Only files with .xlsx or .xls extentions are allowed here.',\n        );\n      }\n      setDroppedFileName(file.name);\n      dataframeFromExcelFile(file).then(rows => {\n        setDataRows(rows);\n        onSpreadSheetDropped(rows);\n      });\n    },\n  });\n\n  return (\n    <div {...getRootProps()} className=\"file-dropper scroll-content p-4 my-2\">\n      <input {...getInputProps()} />\n      {!droppedFileName && (\n        <p>\n          Drop excel file here\n          <br />\n          (or click to choose file)\n        </p>\n      )}\n      {!!droppedFileName && <p>{droppedFileName}</p>}\n      {!!dataRows && <ScheduleCard schedule={{ title: '', rows: dataRows }} />}\n    </div>\n  );\n};\n\nexport default SpreadSheetDropBox;\n","import React, { useState, useEffect } from 'react';\nimport { useDropzone } from 'react-dropzone';\n\nimport { convertImageFileToBase64Str } from '../../util';\n\ninterface ImageDropBoxProps {\n  onImageDropped: (image: string) => void;\n  currentImage?: string;\n}\nconst ImageDropBox: React.FC<ImageDropBoxProps> = ({\n  onImageDropped,\n  currentImage,\n}) => {\n  const [previewImage, setPreviewImage] = useState(currentImage);\n\n  useEffect(() => setPreviewImage(currentImage), [currentImage]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop: (files: File[]) => {\n      const file = files[0];\n      const imageExt = /^([a-zA-Z0-9\\s_\\\\.\\-:])+(.jpg|.jpeg|.png)$/;\n      if (!imageExt.test(file.name.toLowerCase())) {\n        return alert(\n          'Only files with .jpg or .jpeg or .png extensions are allowed here.',\n        );\n      }\n      convertImageFileToBase64Str(file).then(base64URL => {\n        setPreviewImage(base64URL as string);\n        onImageDropped(base64URL as string);\n      });\n    },\n  });\n\n  return (\n    <div {...getRootProps()} className=\"image-dropper mt-2\">\n      <input {...getInputProps()} />\n      <p>\n        Drop logo here\n        <br />\n        (or click to choose file)\n      </p>\n      {!!previewImage && <img src={previewImage} className=\"logo\" />}\n    </div>\n  );\n};\n\nexport default ImageDropBox;\n","import React from 'react';\n\nimport moment from 'moment';\nimport * as linkify from 'linkifyjs';\nimport { Schedule } from '../../types';\n\ninterface SmartTextProps {\n  input: string;\n}\n/** If input contains a link, SmartText will replace it with a clickable ancor tag */\nconst SmartText: React.FC<SmartTextProps> = ({ input }) => {\n  const urls = linkify.find(input);\n  if (urls.length === 0) {\n    return <p>{input}</p>;\n  }\n  const { value, type } = urls[0];\n  return <a href={value}>{type === 'url' ? 'Click here' : value}</a>;\n};\n\ninterface LiveItemsProps {\n  schedules: Schedule[];\n}\n\nconst LiveItems: React.FC<LiveItemsProps> = ({ schedules }) => {\n  const rows = [];\n  schedules.map(schedule => {\n    rows.push(...schedule.rows);\n  });\n  const headerRows = rows[0];\n\n  const days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\"\n  ]\n\n  const now = new Date();\n\n  const filteredByDay = rows.filter((row) => {\n    let flag = false;\n    const rowDays = row[2];\n    if (rowDays.includes('Daily')) {\n      flag = true;\n    } else if (rowDays.includes(days[now.getDay()])) {\n      flag = true;\n    } else if (rowDays.includes('-')) {\n      const rowDaysArr = rowDays.split(/[^\\w\\-]/);\n      rowDaysArr.forEach(rowDay => {\n        if (rowDay.includes('-')) {\n          const leftRight = rowDay.split('-');\n          const left = days.indexOf(leftRight[0]);\n          const right = days.indexOf(leftRight[1]);\n          if (left < now.getDay() && right > now.getDay()) {\n            flag = true;\n          }\n        }\n      });\n    }\n    return flag\n  })\n\n  const filteredByTime = filteredByDay.filter(row => {\n    const rowTimes = row[3].match(/\\d\\d?:\\d\\d ?(?:[AP]M)?/g);\n    if (!rowTimes[0].toLowerCase().includes('pm') && row[3].toLowerCase().includes('pm')) {\n      rowTimes[0]+=' pm';\n    }\n    const startTime = moment(rowTimes[0], 'h:mm:ss a');\n    const endTime = rowTimes.length > 1 ? moment(rowTimes[1], 'h:mm:ss a') : moment(startTime).add(1,'h');\n    startTime.subtract(5, 'm')\n\n    return moment(now).isBetween(startTime, endTime, null, '[)')\n  })\n\n  if (!filteredByTime.length) {\n    return null;\n  }\n\n  return (\n    <div className=\"schedule-card my-5\">\n      <div className=\"card-header row\">\n        <h1 className=\"schedule-title\">Live Classes</h1>\n      </div>\n      <table className=\"table table-striped table-bordered table-hover shadow\">\n        <thead className=\"text-light\">\n          <tr>\n            {headerRows.map((col, idx) => (\n              <th key={idx}>{col}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {filteredByTime.map((row, rowId) => (\n            <tr key={rowId}>\n              {row.map((cell, cellId) => (\n                <td key={cellId}>\n                  <SmartText\n                    input={cell}\n                  />\n                </td>\n              ))}\n            </tr>\n            )\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default LiveItems;","import React from 'react';\nimport SCALogo from '../assets/SCALogo.png';\n\nconst Header: React.FC = props => (\n  <>\n    <header className=\"navbar fixed-top bg-light shadow\">\n      <div className=\"w-100 d-flex justify-content-between\">\n        <img\n          className=\"navbar-brand py-0\"\n          src={SCALogo}\n          alt=\"SCA\"\n          height=\"60\"\n        />\n        <a href=\"mailto:info@scaupdates.org\" className=\"btn btn-primary pt-3\">\n          Contact Us\n        </a>\n      </div>\n\n      <h5 className=\"w-100 text-center header-title m-0\">\n        Zoom Class Schedules:\n      </h5>\n    </header>\n    <div className=\"header-spacing\"></div>\n  </>\n);\n\nexport default Header;\n","import React, { useState } from 'react';\nimport { ScheduleCard, LiveItems } from '../components';\n\nimport { Schedule } from '../../types';\n\ninterface HomeScreenProps {\n  schedules: Schedule[];\n}\n\nconst HomeScreen: React.FC<HomeScreenProps> = ({ schedules }) => {\n  const [filterType, setfilterType] = useState<string>('none');\n  const [filterVal, setFilterVal] = useState<string>('');\n\n  return (\n    <>\n      <div className=\"container\">\n        <LiveItems schedules={schedules} />\n      </div>\n      <div className=\"container\">\n        <div className=\"input-group mt-3\">\n          <label htmlFor=\"filter\" className=\"header-title\">\n            Filter By:{' '}\n            <select\n              name=\"filter\"\n              onChange={e => setfilterType(e.target.value)}\n              id=\"\"\n              value={filterType}>\n              <option value=\"none\">No filter</option>\n              <option value=\"time\">Time of day</option>\n              <option value=\"day\">Day of week</option>\n              <option value=\"class\">Class</option>\n              <option value=\"teacher\">Teacher</option>\n            </select>\n            {filterType !== 'none' && (\n              <input\n                type=\"text\"\n                className=\"ml-2\"\n                onChange={e => setFilterVal(e.target.value.toLowerCase())}\n                placeholder={`Enter ${filterType}(s)`}\n              />\n            )}\n          </label>\n        </div>\n        {schedules.map((schedule, idx) => {\n          return (\n            <ScheduleCard\n              key={idx}\n              schedule={schedule}\n              filter={\n                !(filterType === 'none' || filterVal === '') && {\n                  type: filterType,\n                  match: filterVal,\n                }\n              }\n            />\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default HomeScreen;\n","import React, { useState, useEffect } from 'react';\n\nimport { SpreadSheetDropBox, ImageDropBox } from '../components';\nimport { Schedule, DataFrame } from '../../types';\n\ninterface SchedulePreviewItemProps {\n  schedule: Schedule;\n  isEditing: boolean;\n  onUpdateBtnPressed: () => void;\n  onDeleteBtnPressed: () => void;\n}\nconst SchedulePreviewItem: React.FC<SchedulePreviewItemProps> = ({\n  schedule,\n  isEditing,\n  onUpdateBtnPressed,\n  onDeleteBtnPressed,\n}) => (\n  <li className=\"list-group-item d-flex justify-content-between my-2\">\n    <h3>{schedule.title}</h3>\n\n    {isEditing ? (\n      <button className=\"btn btn-danger m-1\" onClick={onDeleteBtnPressed}>\n        x\n      </button>\n    ) : (\n      <button className=\"btn btn-warning\" onClick={onUpdateBtnPressed}>\n        <i className=\"fas fa-edit text-light\"></i>\n      </button>\n    )}\n  </li>\n);\n\ninterface AdminScreenProps {\n  schedules: Schedule[];\n  createSchedule: (\n    newSchedule: Schedule,\n  ) => Promise<firebase.database.Reference> | void;\n  deleteSchedule: (_id: firebase.database.Reference) => Promise<boolean>;\n  updateSchedule: (\n    _id: firebase.database.Reference,\n    updatedSchedule: Schedule,\n  ) => Promise<boolean>;\n}\n\nconst AdminScreen: React.FC<AdminScreenProps> = ({\n  schedules,\n  createSchedule,\n  deleteSchedule,\n  updateSchedule,\n}) => {\n  const [scheduleBeingEdited, setScheduleBeingEdited] = useState<Schedule>(\n    undefined,\n  );\n  const updateScheduleBeingEdited = updates =>\n    setScheduleBeingEdited({ ...scheduleBeingEdited, ...updates });\n\n  const onSaveBtnPressed = () => {\n    const { title, rows, logo } = scheduleBeingEdited;\n    const newSchedule = { title, rows, logo };\n    if (scheduleBeingEdited._id) {\n      updateSchedule(scheduleBeingEdited._id, newSchedule);\n    } else {\n      createSchedule(newSchedule);\n    }\n    setScheduleBeingEdited(undefined);\n  };\n\n  useEffect(() => {\n    console.log(scheduleBeingEdited);\n  }, [scheduleBeingEdited]);\n  return (\n    <div className=\"admin-page-container\">\n      <div className=\"schedule-manager-widget row mt-5 py-5\">\n        <div className=\"col scroll-content\">\n          {schedules.map((schedule, idx) => (\n            <SchedulePreviewItem\n              key={idx}\n              schedule={schedule}\n              isEditing={scheduleBeingEdited?._id === schedule._id}\n              onUpdateBtnPressed={() => setScheduleBeingEdited(schedule)}\n              onDeleteBtnPressed={() => deleteSchedule(schedule._id)}\n            />\n          ))}\n        </div>\n        <div className=\"col schedule-upload-container\">\n          <div className=\"text-center\">\n            <h3 className=\"text-light\">\n              {!!scheduleBeingEdited\n                ? 'Update Schedule:'\n                : 'Upload Schedule Here:'}\n            </h3>\n          </div>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Schedule Title\"\n            value={scheduleBeingEdited?.title || ''}\n            onChange={e => updateScheduleBeingEdited({ title: e.target.value })}\n          />\n          <ImageDropBox\n            onImageDropped={logo => updateScheduleBeingEdited({ logo })}\n            currentImage={scheduleBeingEdited?.logo}\n          />\n          <SpreadSheetDropBox\n            onSpreadSheetDropped={rows => updateScheduleBeingEdited({ rows })}\n            currentSpreadSheet={scheduleBeingEdited?.rows}\n          />\n\n          <button className=\"btn btn-success\" onClick={onSaveBtnPressed}>\n            {scheduleBeingEdited?._id ? 'Save updates' : 'Upload Schedule'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminScreen;\n","import { Schedule, Database } from '../types';\n\nclass ScheduleService {\n  private storage: Database;\n\n  constructor(database: Database) {\n    this.storage = database;\n  }\n\n  async addSchedule(schedule: Schedule) {\n    return this.storage.push('schedules', schedule);\n  }\n\n  async removeSchedule(_id: firebase.database.Reference) {\n    return this.storage.delete('schedules', _id);\n  }\n\n  async updateSchedule(_id: firebase.database.Reference, newSchedule: Schedule) {\n    return this.storage.write(`schedules/${_id}`, newSchedule);\n  }\n\n  async getAllSchedules(): Promise<Schedule[]> {\n    return this._alphabetize(await this.storage.findAll('schedules'));\n  }\n\n  onSchedulesChanged(cb: (schedules: Schedule[]) => void) {\n    this.storage.onChange('schedules', data => cb(this._alphabetize(data)));\n  }\n\n  _alphabetize(schedules: Schedule[]) {\n    return schedules ? schedules.sort((a, b) => a.title > b.title ? 1 : a.title < b.title ? -1 : 0) : [];\n  }\n}\n\nfunction createScheduleManager(persistedStorage: Database) {\n  return new ScheduleService(persistedStorage);\n}\n\nexport default createScheduleManager;\n","import firebase from 'firebase';\n\nimport { Database, FirebaseConfig } from '../types';\nimport { convertJsonToArrayWithIds } from '../util';\n\nclass FirebaseManager implements Database {\n  db: firebase.database.Database;\n\n  constructor(config: FirebaseConfig) {\n    const app = firebase.initializeApp(config);\n    this.db = app.database();\n  }\n\n  async read(path: string) {\n    return this.db\n      .ref(path)\n      .once('value')\n      .then(s => s.val());\n  }\n\n  async write(path: string, data: any) {\n    return this.db.ref(path).set(data);\n  }\n\n  async push(basePath: string, data: any) {\n    return this.db.ref(basePath).push(data);\n  }\n\n  /** Gets all documents with their id's in collection */\n  async findAll(path: string) {\n    return this.db.ref(path).once('value')\n    .then(s => s.val() || {}).then(convertJsonToArrayWithIds)\n  }\n\n  async delete(path: string, _id: firebase.database.Reference) {\n    return this.db.ref(`${path}/${_id}`).remove();\n  }\n\n  onChange(path: string, cb: (data: any) => void) {\n    this.db.ref(path).on('value', (s) => cb(convertJsonToArrayWithIds(s.val())));\n  }\n\n}\n\nfunction createFirebaseDbManager(config: FirebaseConfig) {\n  return new FirebaseManager(config);\n}\n\nexport default createFirebaseDbManager;\n","import { FirebaseConfig } from '../types';\n\nimport createScheduleManager from './ScheduleService';\nimport createFirebaseDbManager from './DatabaseService';\n\nconst firebaseConfig: FirebaseConfig = {\n  apiKey: \"AIzaSyDUNiNW3dfplmHAq65wfKIGGSHS8MGXgzM\",\n  authDomain: \"sca-rab-schedules.firebaseapp.com\",\n  databaseURL: \"https://sca-rab-schedules.firebaseio.com\",\n  projectId: \"sca-rab-schedules\",\n  storageBucket: \"sca-rab-schedules.appspot.com\",\n  messagingSenderId: \"893196040077\",\n  appId: \"1:893196040077:web:75ee18b5d771028f616fc4\"\n}\n\nconst database = createFirebaseDbManager(firebaseConfig);\nconst scheduleManager = createScheduleManager(database);\n\nexport { scheduleManager };\n","import React, { useEffect, useState } from 'react';\nimport { Schedule } from '../types';\nimport { HomeScreen } from '../ui';\nimport { scheduleManager } from '../service';\n\nconst HomeScreenCreator = () => {\n  const [schedules, setSchedules] = useState<Schedule[]>([]);\n\n  useEffect(() => {\n    scheduleManager.onSchedulesChanged(setSchedules);\n  }, []);\n\n  return <HomeScreen schedules={schedules} />;\n};\n\nexport default HomeScreenCreator;\n","import React, { useEffect, useState } from 'react';\n\nimport { AdminScreen } from '../ui';\nimport { scheduleManager } from '../service';\nimport { Schedule, DataFrame } from '../types';\n\nconst AdminScreenCreator = () => {\n  const [currentSchedules, setCurrentSchedules] = useState<Schedule[]>([]);\n\n  useEffect(() => {\n    scheduleManager.onSchedulesChanged(setCurrentSchedules);\n  }, []);\n\n  const uploadSchedule = schedule => {\n    if (!schedule.rows) {\n      return alert('Please upload a spreadsheet first');\n    }\n    if (!schedule.title) {\n      return alert('Please enter the title of this table');\n    }\n    return scheduleManager.addSchedule(schedule);\n  };\n\n  const removeSchedule = _id => {\n    return scheduleManager.removeSchedule(_id);\n  };\n\n  const updateSchedule = (_id, updatedSchedule) => {\n    return scheduleManager.updateSchedule(_id, updatedSchedule);\n  };\n\n  return (\n    <AdminScreen\n      schedules={currentSchedules}\n      createSchedule={uploadSchedule}\n      updateSchedule={updateSchedule}\n      deleteSchedule={removeSchedule}\n    />\n  );\n};\n\nexport default AdminScreenCreator;\n","import React from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\n\nimport { HomeScreenCreator, AdminScreenCreator } from './factory';\n\nconst AppNavigator = () => (\n  <HashRouter>\n    <Route exact path=\"/\" component={HomeScreenCreator} />\n    <Route exact path=\"/admin\" component={AdminScreenCreator} />\n  </HashRouter>\n);\n\nexport default AppNavigator;\n","import React from 'react';\n\nimport { Header } from './ui/components';\nimport AppNavigator from './AppNavigator';\nimport SCALogo from './ui/assets/SCALogo.png';\n\nconst App = () => (\n  <>\n    <Header />\n    <AppNavigator />\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './ui/styles.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}