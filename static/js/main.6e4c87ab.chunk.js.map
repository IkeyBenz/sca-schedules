{"version":3,"sources":["ui/assets/spinner.gif","ui/assets/SCALogo.png","ui/assets/on-air-indicator.png","ui/assets/sca-white.svg","util.ts","ui/components/ScheduleCard.tsx","service/ScheduleService.ts","service/AttachmentService.ts","service/DatabaseService.ts","service/FormService.ts","service/index.ts","ui/components/LiveItems.tsx","ui/screens/Classes.tsx","factory/ClassesScreenCreator.tsx","AppNavigator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","convertJsonToArrayWithIds","obj","Object","entries","map","_id","val","excludeFilterDataFrameRows","filterType","filterVal","data","header","searchableColIndex","getColumnIdxOfKey","filteredRows","slice","filter","row","cellText","toLowerCase","includes","concat","filterDataFrameRows","key","findIndex","currKey","SmartText","input","highlight","passwordCol","urls","linkify","location","useLocation","password","length","className","value","type","iconSize","pathname","href","style","height","width","ScheduleCard","schedule","title","rows","logo","match","filteredCols","reduce","acc","cur","idx","toString","startsWith","push","filterColIdx","col","passwordColIdx","shouldHighlight","colText","colIdx","text","src","rIdx","cIdx","ScheduleService","database","storage","convertTimesToLocalTimezone","adjustTime","time","moment","local","format","idxOfTime","i","newRow","timeRange","split","trim","join","this","read","scheduleRef","then","cb","onChange","createScheduleManager","persistedStorage","AttachmentService","attachment","delete","newAttachment","write","findAll","_alphabetize","attachments","sort","a","b","createAttachmentManager","FirebaseManager","config","db","app","firebase","initializeApp","path","ref","once","s","set","basePath","remove","on","createFirebaseDbManager","FormService","form","newForm","tehillim","firstName","createFormManager","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","scheduleManager","LiveItems","schedules","heading","forEach","headerRows","dayIdx","timeIdx","passwordIdx","days","now","Date","filteredByDay","flag","rowDays","getDay","rowDay","leftRight","left","v","right","live","elapsed","upcoming","rowTimes","startTime","endTime","add","subtract","isBetween","isSameOrAfter","isBefore","rowId","cell","cellId","ClassesScreen","useState","setfilterType","setFilterVal","setHeading","useEffect","today","calcAvailableTimes","useCallback","validTime","times","moreTimes","test","Array","from","Set","_a","_b","calcTeachers","teachers","target","rel","htmlFor","name","e","id","placeholder","ClassesScreenCreator","setSchedules","onSchedulesChanged","Classes","CompThatTracksLocation","history","useHistory","listen","ReactGa","pageview","MainNavigator","App","AppNavigator","Boolean","window","hostname","initialize","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6e4c87ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.3acec546.gif\";","module.exports = __webpack_public_path__ + \"static/media/SCALogo.80df96a3.png\";","module.exports = __webpack_public_path__ + \"static/media/on-air-indicator.fb6b3f3c.png\";","module.exports = __webpack_public_path__ + \"static/media/sca-white.cbe6bec1.svg\";","import moment from 'moment-timezone';\nimport xlsx from 'xlsx';\n\n\nexport const dataframeFromExcelFile = (excelFile: File) =>\n  new Promise<DataFrame>(resolve => {\n    var reader = new FileReader();\n\n    reader.onload = function(e) {\n      const data = e.target.result;\n      const workbook = xlsx.read(data, { type: 'array' });\n      const spreadSheet = workbook.Sheets[workbook.SheetNames[0]];\n\n      const rowObjs = xlsx.utils.sheet_to_json(spreadSheet);\n      const header = Object.keys(rowObjs[0]);\n      const rows: DataFrame = [header].concat(\n        rowObjs.map(obj => header.map(key => obj[key])),\n      );\n      resolve(cleanExcelData(rows));\n    };\n\n    reader.readAsArrayBuffer(excelFile);\n  });\n\nexport const convertImageFileToBase64Str = (image: File) => \n  new Promise<string | ArrayBuffer>(resolve => {\n    const reader = new FileReader();\n    reader.onloadend = function (e) {\n      resolve(e.target.result);\n    }\n    reader.readAsDataURL(image);\n  });\n    \n\nexport const adjustExcelTime = string => {\n    return string.toString();\n};\n\nexport const cleanExcelData = (d: DataFrame) => \n    d.map(rows => rows.map(col => adjustExcelTime(col)));\n\n\nexport const convertJsonToArrayWithIds = (obj: object) =>\n    Object.entries(obj).map(([_id, val]) => ({ _id, ...val }));\n\nexport const excludeFilterDataFrameRows = (filterType: string, filterVal: string, data: DataFrame) => {\n    const header = [...data[0]];\n    const searchableColIndex = getColumnIdxOfKey(data, filterType);\n    if (searchableColIndex === -1) { // This table doesn't have a column for specified filterType\n        return [...data];\n    }\n    const filteredRows = data.slice(1).filter(row => {\n        let cellText = row[searchableColIndex];\n        // if (filterType === 'time') cellText = cellText.replace(':', '');\n        return cellText && !cellText.toLowerCase().includes(filterVal.toLowerCase());\n    });\n    return [header].concat(filteredRows);\n}\n\nexport const filterDataFrameRows = (filterType: string, filterVal: string, data: DataFrame) => {\n    const header = [...data[0]];\n    const searchableColIndex = getColumnIdxOfKey(data, filterType);\n    if (searchableColIndex === -1) { // This table doesn't have a column for specified filterType\n        return [header];\n    }\n    const filteredRows = data.slice(1).filter(row => {\n        let cellText = row[searchableColIndex];\n        // if (filterType === 'time') cellText = cellText.replace(':', '');\n        return cellText && cellText.toLowerCase().includes(filterVal.toLowerCase());\n    });\n    return [header].concat(filteredRows);\n}\n\nexport const getColumnIdxOfKey = (data: DataFrame, key: string) => {\n  const colIndex = data[0].findIndex(currKey =>\n    currKey.toLowerCase().includes(key.toLowerCase())\n  );\n  return colIndex;\n}\n\n// Time is intended to be formatted as '7:00 AM'\nexport const adjustToLocalTimezone = time => {\n  return moment(time, 'h:mm A').tz('America/New_York').format('h:mm A');\n}","import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport * as linkify from 'linkifyjs';\n\nimport { excludeFilterDataFrameRows, filterDataFrameRows } from '../../util';\n\ninterface ScheduleCardProps {\n  schedule: Schedule;\n  filter?: {\n    /** The column in the header to look for */\n    type: string;\n    /** The string to compare cells with */\n    match: string;\n  };\n  stringToHighlight?: string;\n}\n\ninterface SmartTextProps {\n  input: string;\n  highlight?: boolean;\n  row?: string[];\n  passwordCol: number;\n}\n/** If input contains a link, SmartText will replace it with a clickable ancor tag */\nexport const SmartText: React.FC<SmartTextProps> = ({\n  input,\n  highlight,\n  row,\n  passwordCol,\n}) => {\n  const urls = linkify.find(input);\n  const location = useLocation();\n  let password = '';\n  if (~passwordCol && row[passwordCol] !== '-') {\n    password = `Password: ${row[passwordCol]}`;\n  }\n  if (urls.length === 0) {\n    return <p className={highlight && 'highlight'}>{input}</p>;\n  }\n\n  const { value, type } = urls[0];\n  let iconSize = location.pathname === '/' ? 80 : 40;\n  return (\n    <span>\n      <a\n        href={value}\n        style={{ height: iconSize, width: iconSize }}\n        className={\n          value.includes('zoom') && type === 'url'\n            ? 'zoomIcon'\n            : value.includes('gotomeeting') && type === 'url'\n            ? 'gtmIcon'\n            : ''\n        }>\n        {type === 'url' ? 'Click here' : value}\n      </a>{' '}\n      <p className=\"password\">{password}</p>\n    </span>\n  );\n};\n\nconst ScheduleCard: React.FC<ScheduleCardProps> = ({ schedule, filter }) => {\n  const location = useLocation();\n  const { title, rows, logo } = schedule;\n\n  const filteredRows = filter\n    ? filterDataFrameRows(filter.type, filter.match, rows)\n    : excludeFilterDataFrameRows('type', 'minyan', rows);\n\n  if (filteredRows.length === 1) {\n    // No rows matched the filter criteria\n    return null;\n  }\n\n  const headerRow = filteredRows[0];\n\n  const filteredCols = headerRow.reduce((acc, cur, idx) => {\n    if (cur.toString().toLowerCase().startsWith('hide')) {\n      acc.push(idx);\n    }\n    return acc;\n  }, []);\n\n  const filterColIdx =\n    filter &&\n    rows[0].findIndex((col) => col.toLowerCase().includes(filter.type));\n\n  const passwordColIdx = rows[0].findIndex((col) =>\n    col.toLowerCase().includes('password'),\n  );\n\n  const shouldHighlight = (colText: string, colIdx) => {\n    if (filter?.type === 'topic' && location.pathname === '/bekhorot') {\n      return false;\n    }\n    const text = colText.toLowerCase();\n    return filterColIdx === colIdx && text.includes(filter.match);\n  };\n\n  return (\n    <div className=\"schedule-card my-5\">\n      <div className=\"card-header\">\n        {!!logo && (\n          <div className=\"w-100\">\n            <img src={logo} className=\"logo ml-4\" />\n          </div>\n        )}\n        <h1 className=\"schedule-title\">{title}</h1>\n      </div>\n      <table className=\"table table-striped table-bordered table-hover shadow\">\n        <thead className=\"text-light\">\n          <tr>\n            {filteredRows[0].map((col, idx) => {\n              if (!filteredCols.includes(idx)) {\n                return <th key={idx}>{col}</th>;\n              }\n            })}\n          </tr>\n        </thead>\n        <tbody>\n          {filteredRows.slice(1).map((row, rIdx) => (\n            <tr key={rIdx}>\n              {row.map((col, cIdx) => {\n                if (!filteredCols.includes(cIdx)) {\n                  return (\n                    <td key={cIdx}>\n                      <SmartText\n                        input={col}\n                        row={row}\n                        passwordCol={passwordColIdx}\n                        highlight={shouldHighlight(col, cIdx)}\n                      />\n                    </td>\n                  );\n                }\n              })}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default ScheduleCard;\n","import moment from 'moment-timezone';\n\nclass ScheduleService {\n  private storage: Database;\n\n  static scheduleRef = '1TS3fZHRPlhI4L_URhKJXGa48eOy6BiqM1GeSUJL9jFs/live-website-feed';\n\n  constructor(database: Database) {\n    this.storage = database;\n  }\n\n  async getAllSchedules(): Promise<DataFrame> {\n    return this.storage.read(ScheduleService.scheduleRef).then((data) => this.convertTimesToLocalTimezone(data));\n  }\n\n  onSchedulesChanged(cb: (data: DataFrame) => void) {\n    this.storage.onChange(ScheduleService.scheduleRef, (data: DataFrame) => {\n      cb(this.convertTimesToLocalTimezone(data));\n    });\n  }\n\n  private convertTimesToLocalTimezone = (data: DataFrame) => {\n    const adjustTime = (time) => moment(time, 'h:mm A').local().format('h:mm A');\n    const idxOfTime = data[0].findIndex((col) => col.toLowerCase().includes('time'));\n    const formatted = data.map((row, i) => {\n      const newRow = [...row];\n      if (i > 0) { // skip header\n        const timeRange = newRow[idxOfTime].split('-').map((time) => time.trim());\n        newRow[idxOfTime] = timeRange.map(adjustTime).join(' - \\n');\n      }\n      return newRow;\n    });\n    return formatted;\n  }\n}\n\nfunction createScheduleManager(persistedStorage: Database) {\n  return new ScheduleService(persistedStorage);\n}\n\nexport default createScheduleManager;\n","import { convertJsonToArrayWithIds } from '../util';\n\nclass AttachmentService {\n  private storage: Database;\n\n  constructor(database: Database) {\n    this.storage = database;\n  }\n\n  async addAttachment(attachment: Attachment) {\n    return this.storage.push('attachments', attachment);\n  }\n\n  async removeAttachment(_id: firebase.database.Reference) {\n    return this.storage.delete('attachments', _id);\n  }\n\n  async updateAttachment(_id: firebase.database.Reference, newAttachment: Attachment) {\n    return this.storage.write(`attachments/${_id}`, newAttachment);\n  }\n\n  async getAllAttachments(): Promise<Attachment[]> {\n    return this._alphabetize(await this.storage.findAll('attachments'));\n  }\n\n  onAttachmentsChanged(cb: (attachments: Attachment[]) => void) {\n    this.storage.onChange('attachments', data =>\n      cb(this._alphabetize(convertJsonToArrayWithIds(data)))\n    );\n  }\n\n  _alphabetize(attachments: Attachment[]) {\n    return attachments ? attachments.sort((a, b) => a.title > b.title ? 1 : a.title < b.title ? -1 : 0) : [];\n  }\n}\n\nfunction createAttachmentManager(persistedStorage: Database) {\n  return new AttachmentService(persistedStorage);\n}\n\nexport default createAttachmentManager;\n","import firebase from 'firebase/app';\nimport 'firebase/database';\nimport 'firebase/storage';\n\nimport { convertJsonToArrayWithIds } from '../util';\n\nclass FirebaseManager implements Database {\n  db: firebase.database.Database;\n\n  storage: firebase.storage.Storage;\n\n  constructor(config: FirebaseConfig) {\n    const app = firebase.initializeApp(config);\n    this.db = app.database();\n    this.storage = app.storage();\n  }\n\n  async read(path: string) {\n    return this.db\n      .ref(path)\n      .once('value')\n      .then((s) => s.val());\n  }\n\n\n  async write(path: string, data: any) {\n    return this.db.ref(path).set(data);\n  }\n\n  async push(basePath: string, data: any) {\n    return this.db.ref(basePath).push(data);\n  }\n\n  /** Gets all documents with their id's in collection */\n  async findAll(path: string) {\n    return this.db.ref(path).once('value')\n      .then((s) => s.val() || {}).then(convertJsonToArrayWithIds);\n  }\n\n  async delete(path: string, _id: firebase.database.Reference) {\n    return this.db.ref(`${path}/${_id}`).remove();\n  }\n\n  onChange(path: string, cb: (data: any) => void) {\n    this.db.ref(path).on('value', (s) => cb(s.val()));\n  }\n}\n\nfunction createFirebaseDbManager(config: FirebaseConfig) {\n  return new FirebaseManager(config);\n}\n\nexport default createFirebaseDbManager;\n","import { convertJsonToArrayWithIds } from '../util';\n\nclass FormService {\n  private storage: Database;\n\n  constructor(database: Database) {\n    this.storage = database;\n  }\n\n  async addForm(form: Form) {\n    return this.storage.push('tehillim', form);\n  }\n\n  async removeForm(_id: firebase.database.Reference) {\n    return this.storage.delete('tehillim', _id);\n  }\n\n  async updateForm(_id: firebase.database.Reference, newForm: Form) {\n    return this.storage.write(`tehillim/${_id}`, newForm);\n  }\n\n  async getAllForms(): Promise<Form[]> {\n    return this._alphabetize(await this.storage.findAll('tehillim'));\n  }\n\n  onFormsChanged(cb: (tehillim: Form[]) => void) {\n    this.storage.onChange('tehillim', data =>\n      cb(this._alphabetize(convertJsonToArrayWithIds(data)))\n    );\n  }\n\n  _alphabetize(tehillim: Form[]) {\n    return tehillim ? tehillim.sort((a, b) => a.firstName > b.firstName ? 1 : a.firstName < b.firstName ? -1 : 0) : [];\n  }\n}\n\nfunction createFormManager(persistedStorage: Database) {\n  return new FormService(persistedStorage);\n}\n\nexport default createFormManager;\n","import createScheduleManager from './ScheduleService';\nimport createAttachmentManager from './AttachmentService';\nimport createFirebaseDbManager from './DatabaseService';\nimport createFormManager from './FormService';\n\nconst firebaseConfig: FirebaseConfig = {\n  apiKey: \"AIzaSyDUNiNW3dfplmHAq65wfKIGGSHS8MGXgzM\",\n  authDomain: \"sca-rab-schedules.firebaseapp.com\",\n  databaseURL: \"https://sca-rab-schedules.firebaseio.com\",\n  projectId: \"sca-rab-schedules\",\n  storageBucket: \"sca-rab-schedules.appspot.com\",\n  messagingSenderId: \"893196040077\",\n  appId: \"1:893196040077:web:75ee18b5d771028f616fc4\"\n}\n\nconst database = createFirebaseDbManager(firebaseConfig);\nconst scheduleManager = createScheduleManager(database);\nconst attachmentManager = createAttachmentManager(database);\nconst formManager = createFormManager(database);\n\nexport { database, scheduleManager, attachmentManager, formManager };\n","import React from 'react';\nimport moment from 'moment';\n// import * as linkify from 'linkifyjs';\n\nimport { SmartText } from './ScheduleCard';\nimport { excludeFilterDataFrameRows, filterDataFrameRows } from '../../util';\n\n\ninterface LiveItemsProps {\n  schedules: Schedule[];\n  filter?: {\n    type: string;\n    match: string;\n  };\n  heading: string;\n}\n\nconst LiveItems: React.FC<LiveItemsProps> = ({\n  schedules,\n  filter,\n  heading,\n}) => {\n  let rows = [];\n  schedules.forEach(schedule => {\n    const filteredRows =\n      filter?.match === 'minyan'\n        ? filterDataFrameRows(filter.type, filter.match, schedule.rows)\n        : excludeFilterDataFrameRows('type', 'minyan', schedule.rows);\n    rows.push(...filteredRows);\n  });\n  const headerRows = rows[0];\n\n  if (rows.length < 2) {\n    // No rows matched the filter criteria\n    return null;\n  }\n\n  // Only show the rows whose data in column 'HIDE-Toggle' contains 'show'\n  rows = filterDataFrameRows('toggle', 'show', rows);\n\n  const dayIdx = headerRows.findIndex(data => data.toLowerCase().includes('days'))\n  const timeIdx = headerRows.findIndex(data => data.toLowerCase().includes('time'))\n  const passwordIdx = headerRows.findIndex(data => data.toLowerCase().includes('password'));\n\n  const filteredCols = headerRows.reduce((acc, cur, idx) => {\n    if (cur.toString().toLowerCase().startsWith('hide') || cur.toString().toLowerCase().startsWith('days')) {\n      acc.push(idx)\n    }\n    return acc;\n  }, []);\n\n  const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n  const now = new Date();\n\n  const filteredByDay = rows.filter(row => {\n    let flag = false;\n    const rowDays = row[dayIdx];\n    if (rowDays.includes('Daily')) {\n      flag = true;\n    } else if (rowDays.includes(days[now.getDay()])) {\n      flag = true;\n    } else if (rowDays.includes('-')) {\n      const rowDaysArr = rowDays.split(/[^\\w-]/);\n      rowDaysArr.forEach(rowDay => {\n        if (rowDay.includes('-')) {\n          const leftRight = rowDay.split('-');\n          const left = days.findIndex(v => {\n            return leftRight[0].includes(v);\n          });\n          const right = days.findIndex(v => {\n            return leftRight[1].includes(v);\n          });\n          if (left < now.getDay() && right > now.getDay()) {\n            flag = true;\n          }\n        }\n      });\n    }\n    return flag;\n  });\n\n  const live = [];\n  const elapsed = [];\n  const upcoming = [];\n\n  filteredByDay.forEach(row => {\n    const rowTimes = row[timeIdx].match(/\\d\\d?:\\d\\d ?(?:[AP]M)?/g);\n    if (!rowTimes) return false;\n    if (\n      !rowTimes[0].toLowerCase().includes('pm') &&\n      row[3].toLowerCase().includes('pm')\n    ) {\n      rowTimes[0] += ' pm';\n    }\n    const startTime = moment(rowTimes[0], 'h:mm:ss a');\n    const endTime =\n      rowTimes.length > 1\n        ? moment(rowTimes[1], 'h:mm:ss a')\n        : moment(startTime).add(1, 'h');\n    startTime.subtract(10, 'm');\n\n    if (moment(now).isBetween(startTime, endTime, null, '[)')) {\n      live.push(row);\n    } else if (moment(now).isSameOrAfter(endTime)) {\n      elapsed.push(row);\n    } else if (moment(now).isBefore(startTime)) {\n      upcoming.push(row);\n    }\n  });\n\n  return (\n    <div className=\"schedule-card my-5\">\n      {\n        (() => (\n          live.length > 0 &&\n          <>\n            <div className=\"card-header\">\n              <h1 className=\"schedule-title\">Ongoing {heading}</h1>\n            </div>\n            <table className=\"table table-striped table-bordered table-hover shadow\">\n              <thead className=\"text-light\">\n                <tr>\n                  {headerRows.map((col, idx) => {\n                    if (!filteredCols.includes(idx)) {\n                      return <th key={idx}>{col}</th>\n                    }\n                  })}\n                </tr>\n              </thead>\n              <tbody>\n                {live.map((row, rowId) => (\n                  <tr key={rowId}>\n                    {row.map((cell, cellId) => {\n                      if (!filteredCols.includes(cellId)) {\n                        return <td key={cellId}>\n                          <SmartText input={cell} passwordCol={passwordIdx} row={row} />\n                        </td>\n                      }\n                    })}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </>\n        ))()\n      }\n      {\n        (() => (\n          upcoming.length > 0 &&\n          <>\n            <div className=\"card-header\">\n              <h1 className=\"schedule-title\">Upcoming {heading}</h1>\n            </div>\n            <table className=\"table table-striped table-bordered table-hover shadow\">\n              <thead className=\"text-light\">\n                <tr>\n                  {headerRows.map((col, idx) => {\n                    if (!filteredCols.includes(idx)) {\n                      return <th key={idx}>{col}</th>\n                    }\n                  })}\n                </tr>\n              </thead>\n              <tbody>\n                {upcoming.map((row, rowId) => (\n                  <tr key={rowId}>\n                    {row.map((cell, cellId) => {\n                      if (!filteredCols.includes(cellId)) {\n                        return <td key={cellId}>\n                         <SmartText input={cell} passwordCol={passwordIdx} row={row} />\n                        </td>\n                      }\n                    })}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </>\n        ))()\n      }\n\n      {\n        (() => (\n          elapsed.length > 0 &&\n          <>\n            <div className=\"card-header\">\n              <h1 className=\"schedule-title\">Completed {heading}</h1>\n            </div>\n            <table className=\"table table-striped table-bordered table-hover shadow\">\n              <thead className=\"text-light\">\n                <tr>\n                  {headerRows.map((col, idx) => {\n                    if (!filteredCols.includes(idx)) {\n                      return <th key={idx}>{col}</th>\n                    }\n                  })}\n                </tr>\n              </thead>\n              <tbody>\n                {elapsed.map((row, rowId) => (\n                  <tr key={rowId}>\n                    {row.map((cell, cellId) => {\n                      if (!filteredCols.includes(cellId)) {\n                        return <td key={cellId}>\n                          <SmartText input={cell} passwordCol={passwordIdx} row={row} />\n                        </td>\n                      }\n                    })}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </>\n        ))()\n      }\n\n    </div>\n  );\n};\n\nexport default LiveItems;\n","import React, { useState, useCallback, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { getColumnIdxOfKey } from '../../util';\nimport { ScheduleCard, LiveItems } from '../components';\n\ninterface ClassesScreenProps {\n  schedules: Schedule[];\n}\n\nconst ClassesScreen: React.FC<ClassesScreenProps> = ({ schedules }) => {\n  const [filterType, setfilterType] = useState<string>('none');\n  const [filterVal, setFilterVal] = useState<string>('');\n  const [heading, setHeading] = useState<string>('Classes');\n  const location = useLocation();\n\n  const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n  useEffect(() => {\n    if (location.pathname.includes('/minyanim')) {\n      setHeading('Minyanim');\n      setfilterType('type');\n      setFilterVal('minyan');\n    } else if (location.pathname.includes('/today')) {\n      const now = new Date();\n      const today = days[now.getDay()];\n      setfilterType('day');\n      setFilterVal(today);\n    }\n  }, [days, location.pathname]);\n\n  const calcAvailableTimes = useCallback(() => {\n    const validTime = /\\d\\d?:\\d\\d ([AP]M)/;\n    let times = [];\n    schedules.forEach(({ rows }) => {\n      const idxOfTime = getColumnIdxOfKey(rows, 'time');\n      const moreTimes = rows\n        .map(row => row[idxOfTime])\n        .filter(time => validTime.test(time))\n        .map(time => time.match(validTime)[0]);\n      times = times.concat(moreTimes);\n    });\n    return Array.from(new Set(times)).sort((a, b) => {\n      const _a = new Date(`1970/01/01 ${a}`);\n      const _b = new Date(`1970/01/01 ${b}`);\n      return _a > _b ? 1 : _a < _b ? -1 : 0;\n    });\n  }, [schedules]);\n\n  const calcTeachers = useCallback(() => {\n    let teachers = [];\n    schedules.forEach(({ rows }) => {\n      const idxOfTime = getColumnIdxOfKey(rows, 'teacher');\n      const moreTimes = rows.map(row => row[idxOfTime]);\n      teachers = teachers.concat(moreTimes);\n    });\n    return Array.from(new Set(teachers)).sort();\n  }, [schedules]);\n\n  return (\n    <>\n      {location.pathname !== '/minyanim' && (\n        <div className=\"container\">\n          <div className=\"row\">\n            <ul className=\"nav nav-pills nav-justified m-3 w-100\">\n              <li className=\"nav-item\">\n                <a\n                  href=\"/#/today\"\n                  className={\n                    location.pathname.includes('/today')\n                      ? 'nav-link active'\n                      : 'nav-link'\n                  }\n                >\n                  Today&apos;s Classes\n                </a>\n              </li>\n              <li className=\"nav-item\">\n                <a\n                  href=\"/#/classes\"\n                  className={\n                    location.pathname.includes('/classes')\n                      ? 'nav-link active'\n                      : 'nav-link'\n                  }\n                >\n                  Full Schedule\n                </a>\n              </li>\n              <li className=\"nav-item\">\n                <a\n                  href=\"https://www.youtube.com/channel/UCsHn2xQEscv11QaNHpPf37A\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"nav-link\"\n                >\n                  Recordings\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n      )}\n      <div className=\"container\">\n        {(() =>\n          location.pathname === '/today' && (\n            <LiveItems\n              schedules={schedules}\n              filter={\n                !(filterType === 'none' || filterVal === '') && {\n                  type: filterType,\n                  match: filterVal,\n                }\n              }\n              heading={heading}\n            />\n          ))()}\n      </div>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"input-group mt-3 mx-3\">\n            <label\n              htmlFor=\"filter\"\n              className={\n                location.pathname === '/classes' ? 'header-title' : 'hidden'\n              }\n            >\n              Filter By:{' '}\n              <select\n                name=\"filter\"\n                onChange={e => {\n                  setfilterType(e.target.value);\n                  setFilterVal('');\n                }}\n                id=\"\"\n                value={filterType}\n              >\n                <option value=\"none\">No filter</option>\n                <option value=\"time\">Time of day</option>\n                <option value=\"day\">Day of week</option>\n                <option value=\"topic\">Topic</option>\n                <option value=\"teacher\">Teacher</option>\n              </select>\n              {filterType !== 'none' &&\n                (filterType === 'day' ? (\n                  <select\n                    className=\"ml-2\"\n                    onChange={e => setFilterVal(e.target.value)}\n                  >\n                    <option value=\"\">Choose Day</option>\n                    <option value=\"mon\">Mon</option>\n                    <option value=\"tues\">Tues</option>\n                    <option value=\"wed\">Wed</option>\n                    <option value=\"thurs\">Thurs</option>\n                    <option value=\"fri\">Fri</option>\n                    <option value=\"sun\">Sun</option>\n                  </select>\n                ) : filterType === 'time' ? (\n                  <select\n                    className=\"ml-2\"\n                    onChange={e => setFilterVal(e.target.value.toLowerCase())}\n                  >\n                    <option value=\"\">Choose Time</option>\n                    {calcAvailableTimes().map(time => (\n                      <option value={time}>{time}</option>\n                    ))}\n                  </select>\n                ) : filterType === 'teacher' ? (\n                  <select\n                    className=\"ml-2\"\n                    onChange={e => setFilterVal(e.target.value.toLowerCase())}\n                  >\n                    <option value=\"\">Choose Teacher</option>\n                    {calcTeachers().map(time => (\n                      <option value={time}>{time}</option>\n                    ))}\n                  </select>\n                ) : (\n                  <input\n                    type=\"text\"\n                    className=\"ml-2\"\n                    onChange={e => setFilterVal(e.target.value.toLowerCase())}\n                    placeholder={`Enter ${filterType}(s)`}\n                  />\n                ))}\n            </label>\n          </div>\n        </div>\n        {location.pathname !== '/today' &&\n          schedules.map((schedule, idx) => (\n            <ScheduleCard\n              key={idx}\n              schedule={schedule}\n              filter={\n                !(filterType === 'none' || filterVal === '') && {\n                  type: filterType,\n                  match: filterVal,\n                }\n              }\n            />\n          ))}\n      </div>\n    </>\n  );\n};\n\nexport default ClassesScreen;\n","import React, { useEffect, useState } from 'react';\n\nimport { ClassesScreen } from '../ui';\nimport { scheduleManager } from '../service';\n\nconst ClassesScreenCreator = () => {\n  const [schedules, setSchedules] = useState<Schedule[]>([]);\n\n  useEffect(() => {\n    scheduleManager.onSchedulesChanged((data: DataFrame) => {\n      setSchedules([{ title: 'All Schedules', rows: data }]);\n    });\n  }, []);\n\n  return <ClassesScreen schedules={schedules} />;\n};\n\nexport default ClassesScreenCreator;\n","import React, { useEffect } from 'react';\nimport { HashRouter, Route, useHistory } from 'react-router-dom';\nimport ReactGa from 'react-ga';\n\nimport { Header, Footer } from './ui/components';\nimport {\n  ClassesScreenCreator,\n  AttachmentsAdminScreenCreator,\n  AttachmentsScreenCreator,\n  FormScreenCreator,\n  IndexScreenCreator,\n} from './factory';\n\ninterface RouteMap {\n  [path: string]: RouteConfig;\n}\ninterface RouteConfig {\n  exact?: boolean;\n  pageName?: string; // For display purposes\n  Component: React.ComponentType;\n}\n\nconst renderRoutes = (routes: RouteMap) =>\n  Object.entries(routes).map(([path, { exact, Component }]) => (\n    <Route path={path} exact={exact} component={Component} />\n  ));\n\nexport const adminRoutes: RouteMap = {\n  '/edit-letters': { exact: true, Component: AttachmentsAdminScreenCreator },\n};\n\nconst AdminNavigator = () => (\n  <HashRouter basename=\"/admin\">{renderRoutes(adminRoutes)}</HashRouter>\n);\n\nconst CompThatTracksLocation = () => {\n  const history = useHistory();\n  useEffect(\n    () =>\n      history.listen(location => {\n        ReactGa.pageview(location.pathname);\n      }),\n    [history]\n  );\n\n  return null;\n};\n\nexport const mainRoutes: RouteMap = {\n  '/': { exact: true, Component: IndexScreenCreator, pageName: '' },\n  '/today': {\n    exact: true,\n    Component: ClassesScreenCreator,\n    // pageName: 'SCA Affiliate Synagogue - Virtual Classes Schedules',\n  },\n  '/classes': {\n    exact: true,\n    Component: ClassesScreenCreator,\n    // pageName: 'SCA Affiliate Synagogue - Virtual Classes Schedules',\n  },\n  '/minyanim': {\n    exact: true,\n    Component: ClassesScreenCreator,\n    // pageName: 'SCA Affiliate Synagogue - Virtual Minyanim Schedules',\n  },\n  '/bekhorot': {\n    exact: true,\n    Component: ClassesScreenCreator,\n    pageName: 'SCA Affiliate Synagogue - Siyum Bekhorot Schedules',\n  },\n  '/letters': {\n    exact: true,\n    Component: AttachmentsScreenCreator,\n    pageName: 'COVID-19 Letters',\n  },\n  '/tehillim': {\n    exact: true,\n    Component: FormScreenCreator,\n    pageName: 'SCA Tehilim Requests',\n  },\n  '/admin': { Component: AdminNavigator },\n  // '/wix/today': { Component: ClassesScreenCreator },\n};\n\nconst MainNavigator = () => (\n  <HashRouter>\n    <CompThatTracksLocation />\n    {/* <Header />\n    {renderRoutes(mainRoutes)}\n    <Footer /> */}\n    <ClassesScreenCreator />\n  </HashRouter>\n);\n\nexport default MainNavigator;\n","import React from 'react';\nimport AppNavigator from './AppNavigator';\n\nconst App = () => <AppNavigator />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactGa from 'react-ga';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'jquery';\nimport 'bootstrap/dist/js/bootstrap.bundle';\nimport './ui/styles.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactGa.initialize('UA-164561407-1');\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}