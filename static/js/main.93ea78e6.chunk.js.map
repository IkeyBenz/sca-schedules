{"version":3,"sources":["ui/components/ScheduleCard.tsx","ui/screens/Home.tsx","ui/components/SpreadSheetDropBox.tsx","ui/screens/Admin.tsx","service/ScheduleService.ts","service/DatabaseService.ts","service/index.ts","factory/HomeScreenCreator.tsx","factory/AdminScreenCreator.tsx","AppNavigator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ScheduleCard","schedule","title","rows","className","map","col","slice","row","HomeScreen","schedules","key","SpreadSheetDropBox","onSpreadSheetDropped","useState","undefined","droppedFileName","setDroppedFileName","convertFileToDF","useCallback","file","excelFile","test","name","toLowerCase","alert","Promise","resolve","reader","FileReader","onload","e","data","target","result","workbook","xlsx","read","type","spreadSheet","Sheets","SheetNames","rowObjs","utils","sheet_to_json","header","Object","keys","concat","obj","readAsArrayBuffer","then","useDropzone","onDrop","files","getRootProps","getInputProps","isDragActive","SchedulePreviewItem","onDeleteBtnPressed","onClick","AdminScreen","onNewScheduleTitleSet","onNewScheduleDataSet","onUploadBtnPressed","onScheduleDelete","idx","_id","placeholder","onChange","value","ScheduleService","database","storage","this","push","console","log","delete","findAll","cb","createScheduleManager","persistedStorage","FirebaseManager","config","db","app","firebase","initializeApp","path","ref","once","s","val","set","basePath","_convertTsonToArrayWithIds","remove","on","entries","createFirebaseDbManager","scheduleManager","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","HomeScreenCreator","setSchedules","useEffect","onSchedulesChanged","Home","AdminScreenCreator","currentSchedules","setCurrentSchedules","scheduleData","setScheduleData","scheduleTitle","setScheduleTitle","Admin","addSchedule","removeSchedule","AppNavigator","basename","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.93ea78e6.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Schedule } from '../../types';\n\ninterface ScheduleCardProps {\n  schedule: Schedule;\n}\n\nconst ScheduleCard: React.FC<ScheduleCardProps> = ({ schedule }) => {\n  const { title, rows } = schedule;\n\n  return (\n    <div className=\"schedule-card\">\n      <h1>{title}</h1>\n      <table className=\"table table-striped table-bordered table-hover shadow\">\n        <thead className=\"text-light\">\n          <tr>\n            {rows[0].map(col => (\n              <th>{col}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {rows.slice(1).map(row => (\n            <tr>\n              {row.map(col => (\n                <td>{col}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default ScheduleCard;\n","import React from 'react';\nimport { ScheduleCard } from '../components';\n\nimport { Schedule } from '../../types';\n\ninterface HomeScreenProps {\n  schedules: Schedule[];\n}\n\nconst HomeScreen: React.FC<HomeScreenProps> = ({ schedules }) => {\n  return (\n    <div className=\"container\">\n      {schedules.map(schedule => (\n        <ScheduleCard key={schedule.title} schedule={schedule} />\n      ))}\n    </div>\n  );\n};\n\nexport default HomeScreen;\n","import React, { useCallback, useState } from 'react';\nimport xlsx from 'xlsx';\n\nimport { useDropzone } from 'react-dropzone';\n\nimport { DataFrame } from '../../types';\n\nconst dataframeFromExcelFile = (excelFile: File) =>\n  new Promise<DataFrame>(resolve => {\n    var reader = new FileReader();\n\n    reader.onload = function(e) {\n      const data = e.target.result;\n      const workbook = xlsx.read(data, { type: 'array' });\n      const spreadSheet = workbook.Sheets[workbook.SheetNames[0]];\n\n      const rowObjs = xlsx.utils.sheet_to_json(spreadSheet);\n      const header = Object.keys(rowObjs[0]);\n      const rows: DataFrame = [header].concat(\n        rowObjs.map(obj => header.map(key => obj[key])),\n      );\n      resolve(rows);\n    };\n\n    reader.readAsArrayBuffer(excelFile);\n  });\n\nconst SpreadSheetDropBox = ({ onSpreadSheetDropped }) => {\n  const [droppedFileName, setDroppedFileName] = useState(undefined);\n\n  const convertFileToDF = useCallback(\n    (file: File) => {\n      const excelExt = /^([a-zA-Z0-9\\s_\\\\.\\-:])+(.xls|.xlsx)$/;\n\n      if (!excelExt.test(file.name.toLowerCase())) {\n        return alert('Only files with .xlsx or .xls extentions are allowed');\n      }\n      setDroppedFileName(file.name);\n      dataframeFromExcelFile(file).then(onSpreadSheetDropped);\n    },\n    [onSpreadSheetDropped],\n  );\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop: (files: File[]) => convertFileToDF(files[0]),\n  });\n\n  return (\n    <div {...getRootProps()} className=\"file-dropper p-4 my-2\">\n      <input {...getInputProps()} />\n      <p>{droppedFileName ? droppedFileName : 'Drop excel file here'}</p>\n    </div>\n  );\n};\n\nexport default SpreadSheetDropBox;\n","import React from 'react';\n\nimport SpreadSheetDropBox from '../components/SpreadSheetDropBox';\nimport { Schedule, DataFrame } from '../../types';\n\ninterface SchedulePreviewItemProps {\n  schedule: Schedule;\n  onDeleteBtnPressed: () => void;\n}\nconst SchedulePreviewItem: React.FC<SchedulePreviewItemProps> = ({\n  schedule,\n  onDeleteBtnPressed,\n}) => (\n  <li className=\"list-group-item d-flex justify-content-between my-2\">\n    <h3>{schedule.title}</h3>\n    <button className=\"btn btn-md btn-danger\" onClick={onDeleteBtnPressed}>\n      x\n    </button>\n  </li>\n);\n\ninterface AdminScreenProps {\n  schedules: Schedule[];\n  onNewScheduleTitleSet: (title: string) => void;\n  onNewScheduleDataSet: (rows: DataFrame) => void;\n  onUploadBtnPressed: () => void;\n  onScheduleDelete: (_id: firebase.database.Reference) => Promise<boolean>;\n}\n\nconst AdminScreen: React.FC<AdminScreenProps> = ({\n  schedules,\n  onNewScheduleTitleSet,\n  onNewScheduleDataSet,\n  onUploadBtnPressed,\n  onScheduleDelete,\n}) => {\n  return (\n    <div className=\"admin-page-container\">\n      <div className=\"schedule-manager-widget row\">\n        <div className=\"col scroll-content\">\n          {schedules.map((schedule, idx) => (\n            <SchedulePreviewItem\n              key={idx}\n              schedule={schedule}\n              onDeleteBtnPressed={() => onScheduleDelete(schedule._id)}\n            />\n          ))}\n        </div>\n        <div className=\"col py-2\">\n          <input\n            type=\"text\"\n            className=\"form-control mb-2\"\n            placeholder=\"Schedule Title\"\n            onChange={e => onNewScheduleTitleSet(e.target.value)}\n          />\n          <SpreadSheetDropBox onSpreadSheetDropped={onNewScheduleDataSet} />\n          <button className=\"btn btn-success\" onClick={onUploadBtnPressed}>\n            Upload Schedule\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminScreen;\n","import { Schedule, Database } from '../types';\n\nclass ScheduleService {\n  storage: Database;\n\n  constructor(database: Database) {\n    this.storage = database;\n  }\n\n  async addSchedule(schedule: Schedule) {\n    return this.storage.push('schedules', schedule);\n  }\n\n  async removeSchedule(_id: firebase.database.Reference) {\n    console.log(typeof this);\n    return this.storage.delete('schedules', _id);\n  }\n\n  async getAllSchedules(): Promise<Schedule[]> {\n    return await this.storage.findAll('schedules') || [];\n\n  }\n\n  onSchedulesChanged(cb: (schedules: Schedule[]) => void) {\n    console.log(this);\n    this.storage.onChange('schedules', data => cb(data || []));\n  }\n}\n\nfunction createScheduleManager(persistedStorage: Database) {\n  return new ScheduleService(persistedStorage);\n}\n\nexport default createScheduleManager;\n","import firebase from 'firebase';\n\nimport { Database, FirebaseConfig } from '../types';\n\nclass FirebaseManager implements Database {\n  db: firebase.database.Database;\n\n  constructor(config: FirebaseConfig) {\n    const app = firebase.initializeApp(config);\n    this.db = app.database();\n  }\n\n  async read(path: string) {\n    return this.db\n      .ref(path)\n      .once('value')\n      .then(s => s.val());\n  }\n\n  async write(path: string, data: any) {\n    return this.db.ref(path).set(data);\n  }\n\n  async push(basePath: string, data: any) {\n    return this.db.ref(basePath).push(data);\n  }\n\n  /** Gets all documents with their id's in collection */\n  async findAll(path: string) {\n    return this.db.ref(path).once('value')\n    .then(s => s.val() || {}).then(this._convertTsonToArrayWithIds)\n  }\n\n  async delete(path: string, _id: firebase.database.Reference) {\n    return this.db.ref(`${path}/${_id}`).remove();\n  }\n\n  onChange(path: string, cb: (data: any) => void) {\n    this.db.ref(path).on('value', (s) => cb(this._convertTsonToArrayWithIds(s.val())));\n  }\n\n  _convertTsonToArrayWithIds(obj: object) {\n    return Object.entries(obj).map(([_id, val]) => ({ _id, ...val }));\n  }\n}\n\nfunction createFirebaseDbManager(config: FirebaseConfig) {\n  return new FirebaseManager(config);\n}\n\nexport default createFirebaseDbManager;\n","import { FirebaseConfig } from '../types';\n\nimport createScheduleManager from './ScheduleService';\nimport createFirebaseDbManager from './DatabaseService';\n\nconst firebaseConfig: FirebaseConfig = {\n  apiKey: \"AIzaSyDUNiNW3dfplmHAq65wfKIGGSHS8MGXgzM\",\n  authDomain: \"sca-rab-schedules.firebaseapp.com\",\n  databaseURL: \"https://sca-rab-schedules.firebaseio.com\",\n  projectId: \"sca-rab-schedules\",\n  storageBucket: \"sca-rab-schedules.appspot.com\",\n  messagingSenderId: \"893196040077\",\n  appId: \"1:893196040077:web:75ee18b5d771028f616fc4\"\n}\n\nconst database = createFirebaseDbManager(firebaseConfig);\nconst scheduleManager = createScheduleManager(database);\n\nexport { scheduleManager };\n","import React, { useEffect, useState } from 'react';\nimport { Schedule } from '../types';\nimport { HomeScreen } from '../ui';\nimport { scheduleManager } from '../service';\n\nconst HomeScreenCreator = () => {\n  const [schedules, setSchedules] = useState<Schedule[]>([]);\n\n  useEffect(() => {\n    scheduleManager.onSchedulesChanged(setSchedules);\n  }, []);\n\n  return <HomeScreen schedules={schedules} />;\n};\n\nexport default HomeScreenCreator;\n","import React, { useEffect, useState } from 'react';\n\nimport { AdminScreen } from '../ui';\nimport { scheduleManager } from '../service';\nimport { Schedule, DataFrame } from '../types';\n\nconst AdminScreenCreator = () => {\n  const [currentSchedules, setCurrentSchedules] = useState<Schedule[]>([]);\n\n  const [scheduleData, setScheduleData] = useState<DataFrame>(undefined);\n  const [scheduleTitle, setScheduleTitle] = useState<string>('');\n\n  useEffect(() => {\n    scheduleManager.onSchedulesChanged(setCurrentSchedules);\n  }, []);\n\n  const uploadSchedule = () => {\n    if (!scheduleData) {\n      return alert('Please upload a spreadsheet first');\n    }\n    if (!scheduleTitle) {\n      return alert('Please enter the title of this table');\n    }\n\n    scheduleManager.addSchedule({\n      title: scheduleTitle,\n      rows: scheduleData,\n    });\n  };\n\n  const removeSchedule = _id => {\n    return scheduleManager.removeSchedule(_id);\n  };\n\n  return (\n    <AdminScreen\n      schedules={currentSchedules}\n      onNewScheduleTitleSet={setScheduleTitle}\n      onNewScheduleDataSet={setScheduleData}\n      onUploadBtnPressed={uploadSchedule}\n      onScheduleDelete={removeSchedule}\n    />\n  );\n};\n\nexport default AdminScreenCreator;\n","import React from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\n\nimport { HomeScreenCreator, AdminScreenCreator } from './factory';\n\nconst AppNavigator = () => (\n  <HashRouter basename=\"sca-schedules\">\n    <Route exact path=\"/\" component={HomeScreenCreator} />\n    <Route exact path=\"/admin\" component={AdminScreenCreator} />\n  </HashRouter>\n);\n\nexport default AppNavigator;\n","import React from 'react';\n\nimport AppNavigator from './AppNavigator';\n\nconst App = () => <AppNavigator />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './ui/styles.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}