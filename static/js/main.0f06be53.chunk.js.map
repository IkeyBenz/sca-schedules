{"version":3,"sources":["ui/assets/SCALogo.png","ui/components/ScheduleCard.tsx","ui/screens/Home.tsx","util.ts","ui/components/SpreadSheetDropBox.tsx","ui/screens/Admin.tsx","service/ScheduleService.ts","service/DatabaseService.ts","service/index.ts","factory/HomeScreenCreator.tsx","factory/AdminScreenCreator.tsx","AppNavigator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","SmartText","input","urls","linkify","length","value","type","href","ScheduleCard","schedule","title","rows","className","map","col","idx","key","slice","row","rIdx","cIdx","HomeScreen","allSchedules","schedules","useState","filterPref","setFilterPref","filterVal","setFilterVal","filterSchedules","useCallback","filter","searchableColIndex","findIndex","toString","toLowerCase","includes","htmlFor","name","onChange","e","target","id","placeholder","console","log","cleanExcelData","d","string","data","Date","moment","format","adjustExcelTime","convertJsonToArrayWithIds","obj","Object","entries","_id","val","SpreadSheetDropBox","onSpreadSheetDropped","undefined","droppedFileName","setDroppedFileName","dataRows","setDataRows","convertFileToDF","file","excelFile","test","alert","Promise","resolve","reader","FileReader","onload","result","workbook","xlsx","read","spreadSheet","Sheets","SheetNames","rowObjs","utils","sheet_to_json","header","keys","concat","readAsArrayBuffer","then","useDropzone","onDrop","files","getRootProps","getInputProps","isDragActive","SchedulePreviewItem","onDeleteBtnPressed","onClick","AdminScreen","onNewScheduleTitleSet","onNewScheduleDataSet","onUploadBtnPressed","onScheduleDelete","ScheduleService","database","storage","this","push","delete","newSchedule","write","findAll","_alphabetize","cb","sort","a","b","createScheduleManager","persistedStorage","FirebaseManager","config","db","app","firebase","initializeApp","path","ref","once","s","set","basePath","remove","on","createFirebaseDbManager","scheduleManager","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","HomeScreenCreator","setSchedules","useEffect","onSchedulesChanged","Home","AdminScreenCreator","currentSchedules","setCurrentSchedules","scheduleData","setScheduleData","scheduleTitle","setScheduleTitle","Admin","addSchedule","removeSchedule","AppNavigator","basename","exact","component","App","src","SCALogo","alt","height","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0f06be53.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SCALogo.b2d06419.png\";","import React from 'react';\n\nimport * as linkify from 'linkifyjs';\nimport { Schedule } from '../../types';\n\ninterface ScheduleCardProps {\n  schedule: Schedule;\n}\n\n/** If input contains a link, SmartText will replace it with a clickable ancor tag */\nconst SmartText = ({ input }) => {\n  const urls = linkify.find(input);\n  if (urls.length === 0) {\n    return <p>{input}</p>;\n  }\n  const { value, type } = urls[0];\n  return <a href={value}>{type === 'url' ? 'Click me' : value}</a>;\n};\n\nconst ScheduleCard: React.FC<ScheduleCardProps> = ({ schedule }) => {\n  const { title, rows } = schedule;\n\n  return (\n    <div className=\"schedule-card my-5\">\n      <h1>{title}</h1>\n      <table className=\"table table-striped table-bordered table-hover shadow\">\n        <thead className=\"text-light\">\n          <tr>\n            {rows[0].map((col, idx) => (\n              <th key={idx}>{col}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {rows.slice(1).map((row, rIdx) => (\n            <tr key={rIdx}>\n              {row.map((col, cIdx) => (\n                <td key={cIdx}>\n                  <SmartText input={col} />\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default ScheduleCard;\n","import React, { useState, useCallback } from 'react';\nimport { ScheduleCard } from '../components';\n\nimport { Schedule } from '../../types';\n\ninterface HomeScreenProps {\n  schedules: Schedule[];\n}\n\ntype FilterPreference = 'none' | 'time' | 'day' | 'rabbi' | 'class';\n\nconst HomeScreen: React.FC<HomeScreenProps> = ({ schedules: allSchedules }) => {\n  const [filterPref, setFilterPref] = useState<FilterPreference>('none');\n  const [filterVal, setFilterVal] = useState<string>('');\n  const onFilterSet = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const filter = e.target.value as FilterPreference;\n    setFilterPref(filter);\n  };\n\n  const filterSchedules = useCallback(\n    (schedules: Schedule[]) => {\n      if (filterPref === 'none' || filterVal === '') {\n        return schedules;\n      }\n\n      return schedules.filter(schedule => {\n        const headerKeys = schedule.rows[0];\n        const searchableColIndex = headerKeys.findIndex(key =>\n          key\n            .toString()\n            .toLowerCase()\n            .includes(filterPref),\n        );\n        return (\n          searchableColIndex !== -1 &&\n          schedule.rows\n            .slice(1)\n            .findIndex(row =>\n              row[searchableColIndex].toLowerCase().includes(filterVal),\n            ) !== -1\n        );\n      });\n    },\n    [filterVal, filterPref],\n  );\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"input-group mt-3\">\n          <label htmlFor=\"filter\" className=\"header-title\">\n            Filter By:{' '}\n            <select\n              name=\"filter\"\n              onChange={onFilterSet}\n              id=\"\"\n              value={filterPref}>\n              <option value=\"none\">No filter</option>\n              <option value=\"time\">Time of day</option>\n              <option value=\"day\">Day of week</option>\n              <option value=\"class\">Class</option>\n              <option value=\"rabbi\">Rabbi</option>\n            </select>\n            {filterPref !== 'none' && (\n              <input\n                type=\"text\"\n                className=\"ml-2\"\n                onChange={e => setFilterVal(e.target.value.toLowerCase())}\n                placeholder={`Enter ${filterPref}(s)`}\n              />\n            )}\n          </label>\n        </div>\n        {filterSchedules(allSchedules).map(schedule => {\n          console.log(schedule);\n          return <ScheduleCard key={schedule.title} schedule={schedule} />;\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default HomeScreen;\n","import moment from 'moment';\n\nimport { DataFrame } from './types';\n\nexport const adjustExcelTime = string => {\n    if (typeof string === 'string') return string;\n    const timeInMiliSeconds = (string - (25567 + 1)) * 86400 * 1000;\n    const fiveHours = 1000 * 60 * 60 * 5;\n    const data = new Date(timeInMiliSeconds + fiveHours);\n    console.log(data);\n    return moment(data).format('LT');\n};\n\nexport const cleanExcelData = (d: DataFrame) => \n    d.map(rows => rows.map(col => adjustExcelTime(col)));\n\n\nexport const convertJsonToArrayWithIds = (obj: object) =>\n    Object.entries(obj).map(([_id, val]) => ({ _id, ...val }));\n","import React, { useCallback, useState } from 'react';\nimport xlsx from 'xlsx';\nimport { useDropzone } from 'react-dropzone';\n\nimport { DataFrame } from '../../types';\nimport { cleanExcelData } from '../../util';\n\nimport ScheduleCard from './ScheduleCard';\n\nconst dataframeFromExcelFile = (excelFile: File) =>\n  new Promise<DataFrame>(resolve => {\n    var reader = new FileReader();\n\n    reader.onload = function(e) {\n      const data = e.target.result;\n      const workbook = xlsx.read(data, { type: 'array' });\n      const spreadSheet = workbook.Sheets[workbook.SheetNames[0]];\n\n      const rowObjs = xlsx.utils.sheet_to_json(spreadSheet);\n      const header = Object.keys(rowObjs[0]);\n      const rows: DataFrame = [header].concat(\n        rowObjs.map(obj => header.map(key => obj[key])),\n      );\n      resolve(cleanExcelData(rows));\n    };\n\n    reader.readAsArrayBuffer(excelFile);\n  });\n\nconst SpreadSheetDropBox = ({ onSpreadSheetDropped }) => {\n  const [droppedFileName, setDroppedFileName] = useState(undefined);\n  const [dataRows, setDataRows] = useState<DataFrame>(undefined);\n\n  const convertFileToDF = useCallback(\n    (file: File) => {\n      const excelExt = /^([a-zA-Z0-9\\s_\\\\.\\-:])+(.xls|.xlsx)$/;\n\n      if (!excelExt.test(file.name.toLowerCase())) {\n        return alert('Only files with .xlsx or .xls extentions are allowed');\n      }\n      setDroppedFileName(file.name);\n      dataframeFromExcelFile(file).then(rows => {\n        setDataRows(rows);\n        onSpreadSheetDropped(rows);\n      });\n    },\n    [onSpreadSheetDropped],\n  );\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop: (files: File[]) => convertFileToDF(files[0]),\n  });\n\n  return (\n    <div {...getRootProps()} className=\"file-dropper scroll-content p-4 my-2\">\n      <input {...getInputProps()} />\n      {!droppedFileName && (\n        <p>\n          Drop excel file here\n          <br />\n          (or click to choose file)\n        </p>\n      )}\n      {!!droppedFileName && <p>{droppedFileName}</p>}\n      {!!dataRows && <ScheduleCard schedule={{ title: '', rows: dataRows }} />}\n    </div>\n  );\n};\n\nexport default SpreadSheetDropBox;\n","import React from 'react';\n\nimport SpreadSheetDropBox from '../components/SpreadSheetDropBox';\nimport { Schedule, DataFrame } from '../../types';\n\ninterface SchedulePreviewItemProps {\n  schedule: Schedule;\n  onDeleteBtnPressed: () => void;\n}\nconst SchedulePreviewItem: React.FC<SchedulePreviewItemProps> = ({\n  schedule,\n  onDeleteBtnPressed,\n}) => (\n  <li className=\"list-group-item d-flex justify-content-between my-2\">\n    <h3>{schedule.title}</h3>\n    <button className=\"btn btn-md btn-danger\" onClick={onDeleteBtnPressed}>\n      x\n    </button>\n  </li>\n);\n\ninterface AdminScreenProps {\n  schedules: Schedule[];\n  onNewScheduleTitleSet: (title: string) => void;\n  onNewScheduleDataSet: (rows: DataFrame) => void;\n  onUploadBtnPressed: () => void;\n  onScheduleDelete: (_id: firebase.database.Reference) => Promise<boolean>;\n}\n\nconst AdminScreen: React.FC<AdminScreenProps> = ({\n  schedules,\n  onNewScheduleTitleSet,\n  onNewScheduleDataSet,\n  onUploadBtnPressed,\n  onScheduleDelete,\n}) => (\n  <div className=\"admin-page-container\">\n    <div className=\"schedule-manager-widget row mt-5 py-5\">\n      <div className=\"col scroll-content\">\n        {schedules.map((schedule, idx) => (\n          <SchedulePreviewItem\n            key={idx}\n            schedule={schedule}\n            onDeleteBtnPressed={() => onScheduleDelete(schedule._id)}\n          />\n        ))}\n      </div>\n      <div className=\"col schedule-upload-container\">\n        <div className=\"text-center\">\n          <h3 className=\"text-light\">Upload Schedules Here:</h3>\n        </div>\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Schedule Title\"\n          onChange={e => onNewScheduleTitleSet(e.target.value)}\n        />\n        <SpreadSheetDropBox onSpreadSheetDropped={onNewScheduleDataSet} />\n        <button className=\"btn btn-success\" onClick={onUploadBtnPressed}>\n          Upload Schedule\n        </button>\n      </div>\n    </div>\n  </div>\n);\n\nexport default AdminScreen;\n","import { Schedule, Database } from '../types';\n\nclass ScheduleService {\n  private storage: Database;\n\n  constructor(database: Database) {\n    this.storage = database;\n  }\n\n  async addSchedule(schedule: Schedule) {\n    return this.storage.push('schedules', schedule);\n  }\n\n  async removeSchedule(_id: firebase.database.Reference) {\n    return this.storage.delete('schedules', _id);\n  }\n\n  async updateSchedule(_id: firebase.database.Reference, newSchedule: Schedule) {\n    return this.storage.write(`schedules/${_id}`, newSchedule);\n  }\n\n  async getAllSchedules(): Promise<Schedule[]> {\n    return this._alphabetize(await this.storage.findAll('schedules'));\n  }\n\n  onSchedulesChanged(cb: (schedules: Schedule[]) => void) {\n    this.storage.onChange('schedules', data => cb(this._alphabetize(data)));\n  }\n\n  _alphabetize(schedules: Schedule[]) {\n    return schedules ? schedules.sort((a, b) => a.title > b.title ? 1 : a.title < b.title ? -1 : 0) : [];\n  }\n}\n\nfunction createScheduleManager(persistedStorage: Database) {\n  return new ScheduleService(persistedStorage);\n}\n\nexport default createScheduleManager;\n","import firebase from 'firebase';\n\nimport { Database, FirebaseConfig } from '../types';\nimport { convertJsonToArrayWithIds } from '../util';\n\nclass FirebaseManager implements Database {\n  db: firebase.database.Database;\n\n  constructor(config: FirebaseConfig) {\n    const app = firebase.initializeApp(config);\n    this.db = app.database();\n  }\n\n  async read(path: string) {\n    return this.db\n      .ref(path)\n      .once('value')\n      .then(s => s.val());\n  }\n\n  async write(path: string, data: any) {\n    return this.db.ref(path).set(data);\n  }\n\n  async push(basePath: string, data: any) {\n    return this.db.ref(basePath).push(data);\n  }\n\n  /** Gets all documents with their id's in collection */\n  async findAll(path: string) {\n    return this.db.ref(path).once('value')\n    .then(s => s.val() || {}).then(convertJsonToArrayWithIds)\n  }\n\n  async delete(path: string, _id: firebase.database.Reference) {\n    return this.db.ref(`${path}/${_id}`).remove();\n  }\n\n  onChange(path: string, cb: (data: any) => void) {\n    this.db.ref(path).on('value', (s) => cb(convertJsonToArrayWithIds(s.val())));\n  }\n\n}\n\nfunction createFirebaseDbManager(config: FirebaseConfig) {\n  return new FirebaseManager(config);\n}\n\nexport default createFirebaseDbManager;\n","import { FirebaseConfig } from '../types';\n\nimport createScheduleManager from './ScheduleService';\nimport createFirebaseDbManager from './DatabaseService';\n\nconst firebaseConfig: FirebaseConfig = {\n  apiKey: \"AIzaSyDUNiNW3dfplmHAq65wfKIGGSHS8MGXgzM\",\n  authDomain: \"sca-rab-schedules.firebaseapp.com\",\n  databaseURL: \"https://sca-rab-schedules.firebaseio.com\",\n  projectId: \"sca-rab-schedules\",\n  storageBucket: \"sca-rab-schedules.appspot.com\",\n  messagingSenderId: \"893196040077\",\n  appId: \"1:893196040077:web:75ee18b5d771028f616fc4\"\n}\n\nconst database = createFirebaseDbManager(firebaseConfig);\nconst scheduleManager = createScheduleManager(database);\n\nexport { scheduleManager };\n","import React, { useEffect, useState } from 'react';\nimport { Schedule } from '../types';\nimport { HomeScreen } from '../ui';\nimport { scheduleManager } from '../service';\n\nconst HomeScreenCreator = () => {\n  const [schedules, setSchedules] = useState<Schedule[]>([]);\n\n  useEffect(() => {\n    scheduleManager.onSchedulesChanged(setSchedules);\n  }, []);\n\n  return <HomeScreen schedules={schedules} />;\n};\n\nexport default HomeScreenCreator;\n","import React, { useEffect, useState } from 'react';\n\nimport { AdminScreen } from '../ui';\nimport { scheduleManager } from '../service';\nimport { Schedule, DataFrame } from '../types';\n\nconst AdminScreenCreator = () => {\n  const [currentSchedules, setCurrentSchedules] = useState<Schedule[]>([]);\n\n  const [scheduleData, setScheduleData] = useState<DataFrame>(undefined);\n  const [scheduleTitle, setScheduleTitle] = useState<string>('');\n\n  useEffect(() => {\n    scheduleManager.onSchedulesChanged(setCurrentSchedules);\n  }, []);\n\n  const uploadSchedule = () => {\n    if (!scheduleData) {\n      return alert('Please upload a spreadsheet first');\n    }\n    if (!scheduleTitle) {\n      return alert('Please enter the title of this table');\n    }\n\n    scheduleManager.addSchedule({\n      title: scheduleTitle,\n      rows: scheduleData,\n    });\n  };\n\n  const removeSchedule = _id => {\n    return scheduleManager.removeSchedule(_id);\n  };\n\n  return (\n    <AdminScreen\n      schedules={currentSchedules}\n      onNewScheduleTitleSet={setScheduleTitle}\n      onNewScheduleDataSet={setScheduleData}\n      onUploadBtnPressed={uploadSchedule}\n      onScheduleDelete={removeSchedule}\n    />\n  );\n};\n\nexport default AdminScreenCreator;\n","import React from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\n\nimport { HomeScreenCreator, AdminScreenCreator } from './factory';\n\nconst AppNavigator = () => (\n  <HashRouter basename=\"sca-schedules\">\n    <Route exact path=\"/\" component={HomeScreenCreator} />\n    <Route exact path=\"/admin\" component={AdminScreenCreator} />\n  </HashRouter>\n);\n\nexport default AppNavigator;\n","import React from 'react';\n\nimport AppNavigator from './AppNavigator';\nimport SCALogo from './ui/assets/SCALogo.png';\n\nconst App = () => (\n  <>\n    <header className=\"navbar fixed-top bg-light shadow\">\n      <img className=\"navbar-brand py-0\" src={SCALogo} alt=\"SCA\" height=\"60\" />\n      <h5 className=\"w-100 text-center header-title m-0\">\n        Zoom Class Schedules:\n      </h5>\n    </header>\n    <div className=\"header-spacing\"></div>\n    <AppNavigator />\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './ui/styles.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}