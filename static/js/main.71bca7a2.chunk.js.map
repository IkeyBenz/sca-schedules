{"version":3,"sources":["ui/components/ScheduleCard.tsx","ui/screens/Home.tsx","ui/components/SpreadSheetDropBox.tsx","ui/screens/Admin.tsx","service/ScheduleService.ts","service/DatabaseService.ts","service/index.ts","factory/HomeScreenCreator.tsx","factory/AdminScreenCreator.tsx","AppNavigator.tsx","App.tsx","serviceWorker.ts","index.tsx","ui/assets/SCALogo.png"],"names":["SmartText","input","urls","linkify","length","value","type","href","ScheduleCard","schedule","title","rows","fixTimes","string","data","Date","moment","format","className","map","col","slice","row","HomeScreen","schedules","key","SpreadSheetDropBox","onSpreadSheetDropped","useState","undefined","droppedFileName","setDroppedFileName","dataRows","setDataRows","convertFileToDF","useCallback","file","excelFile","test","name","toLowerCase","alert","Promise","resolve","reader","FileReader","onload","e","target","result","workbook","xlsx","read","spreadSheet","Sheets","SheetNames","rowObjs","utils","sheet_to_json","header","Object","keys","concat","obj","readAsArrayBuffer","readExcelFile","then","useDropzone","onDrop","files","getRootProps","getInputProps","isDragActive","SchedulePreviewItem","onDeleteBtnPressed","onClick","AdminScreen","onNewScheduleTitleSet","onNewScheduleDataSet","onUploadBtnPressed","onScheduleDelete","idx","_id","placeholder","onChange","ScheduleService","database","storage","this","push","console","log","delete","findAll","_alphabetize","cb","sort","a","b","createScheduleManager","persistedStorage","FirebaseManager","config","db","app","firebase","initializeApp","path","ref","once","s","val","set","basePath","_convertTsonToArrayWithIds","remove","on","entries","createFirebaseDbManager","scheduleManager","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","HomeScreenCreator","setSchedules","useEffect","onSchedulesChanged","Home","AdminScreenCreator","currentSchedules","setCurrentSchedules","scheduleData","setScheduleData","scheduleTitle","setScheduleTitle","Admin","addSchedule","removeSchedule","AppNavigator","basename","exact","component","App","src","SCALogo","alt","height","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.71bca7a2.chunk.js","sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport * as linkify from 'linkifyjs';\nimport { Schedule } from '../../types';\n\ninterface ScheduleCardProps {\n  schedule: Schedule;\n}\n\n/** If input contains a link, SmartText will replace it with a clickable ancor tag */\nconst SmartText = ({ input }) => {\n  const urls = linkify.find(input);\n  if (urls.length === 0) {\n    return <p>{input}</p>;\n  }\n  const { value, type } = urls[0];\n  return <a href={value}>{type === 'url' ? 'Click me' : value}</a>;\n};\n\nconst ScheduleCard: React.FC<ScheduleCardProps> = ({ schedule }) => {\n  const { title, rows } = schedule;\n\n  const fixTimes = string => {\n    if (typeof string === 'string') return string;\n    const timeInMiliSeconds = (string - (25567 + 1)) * 86400 * 1000;\n    const fiveHours = 1000 * 60 * 60 * 5;\n    const data = new Date(timeInMiliSeconds + fiveHours);\n    return moment(data).format('LT');\n  };\n\n  return (\n    <div className=\"schedule-card my-5\">\n      <h1>{title}</h1>\n      <table className=\"table table-striped table-bordered table-hover shadow\">\n        <thead className=\"text-light\">\n          <tr>\n            {rows[0].map(col => (\n              <th>{col}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {rows.slice(1).map(row => (\n            <tr>\n              {row.map(col => (\n                <td>\n                  <SmartText input={fixTimes(col)} />\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default ScheduleCard;\n","import React from 'react';\nimport { ScheduleCard } from '../components';\n\nimport { Schedule } from '../../types';\n\ninterface HomeScreenProps {\n  schedules: Schedule[];\n}\n\nconst HomeScreen: React.FC<HomeScreenProps> = ({ schedules }) => {\n  return (\n    <>\n      <div className=\"container\">\n        {schedules.map(schedule => (\n          <ScheduleCard key={schedule.title} schedule={schedule} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default HomeScreen;\n","import React, { useCallback, useState } from 'react';\nimport xlsx from 'xlsx';\nimport readExcelFile from 'read-excel-file';\nimport { useDropzone } from 'react-dropzone';\nimport ScheduleCard from './ScheduleCard';\nimport { DataFrame } from '../../types';\n\nconst dataframeFromExcelFile = (excelFile: File) =>\n  new Promise<DataFrame>(resolve => {\n    var reader = new FileReader();\n\n    reader.onload = function(e) {\n      const data = e.target.result;\n      const workbook = xlsx.read(data, { type: 'array' });\n      const spreadSheet = workbook.Sheets[workbook.SheetNames[0]];\n\n      const rowObjs = xlsx.utils.sheet_to_json(spreadSheet);\n      const header = Object.keys(rowObjs[0]);\n      const rows: DataFrame = [header].concat(\n        rowObjs.map(obj => header.map(key => obj[key])),\n      );\n      resolve(rows);\n    };\n\n    reader.readAsArrayBuffer(excelFile);\n    readExcelFile(excelFile).then();\n  });\n\nconst SpreadSheetDropBox = ({ onSpreadSheetDropped }) => {\n  const [droppedFileName, setDroppedFileName] = useState(undefined);\n  const [dataRows, setDataRows] = useState<DataFrame>(undefined);\n\n  const convertFileToDF = useCallback(\n    (file: File) => {\n      const excelExt = /^([a-zA-Z0-9\\s_\\\\.\\-:])+(.xls|.xlsx)$/;\n\n      if (!excelExt.test(file.name.toLowerCase())) {\n        return alert('Only files with .xlsx or .xls extentions are allowed');\n      }\n      setDroppedFileName(file.name);\n      dataframeFromExcelFile(file).then(rows => {\n        setDataRows(rows);\n        onSpreadSheetDropped(rows);\n      });\n    },\n    [onSpreadSheetDropped],\n  );\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop: (files: File[]) => convertFileToDF(files[0]),\n  });\n\n  return (\n    <div {...getRootProps()} className=\"file-dropper scroll-content p-4 my-2\">\n      <input {...getInputProps()} />\n      {!droppedFileName && (\n        <p>\n          Drop excel file here\n          <br />\n          (or click to choose file)\n        </p>\n      )}\n      {!!droppedFileName && <p>{droppedFileName}</p>}\n      {!!dataRows && <ScheduleCard schedule={{ title: '', rows: dataRows }} />}\n    </div>\n  );\n};\n\nexport default SpreadSheetDropBox;\n","import React from 'react';\n\nimport SpreadSheetDropBox from '../components/SpreadSheetDropBox';\nimport { Schedule, DataFrame } from '../../types';\n\ninterface SchedulePreviewItemProps {\n  schedule: Schedule;\n  onDeleteBtnPressed: () => void;\n}\nconst SchedulePreviewItem: React.FC<SchedulePreviewItemProps> = ({\n  schedule,\n  onDeleteBtnPressed,\n}) => (\n  <li className=\"list-group-item d-flex justify-content-between my-2\">\n    <h3>{schedule.title}</h3>\n    <button className=\"btn btn-md btn-danger\" onClick={onDeleteBtnPressed}>\n      x\n    </button>\n  </li>\n);\n\ninterface AdminScreenProps {\n  schedules: Schedule[];\n  onNewScheduleTitleSet: (title: string) => void;\n  onNewScheduleDataSet: (rows: DataFrame) => void;\n  onUploadBtnPressed: () => void;\n  onScheduleDelete: (_id: firebase.database.Reference) => Promise<boolean>;\n}\n\nconst AdminScreen: React.FC<AdminScreenProps> = ({\n  schedules,\n  onNewScheduleTitleSet,\n  onNewScheduleDataSet,\n  onUploadBtnPressed,\n  onScheduleDelete,\n}) => (\n  <div className=\"admin-page-container\">\n    <div className=\"schedule-manager-widget row mt-5 py-5\">\n      <div className=\"col scroll-content\">\n        {schedules.map((schedule, idx) => (\n          <SchedulePreviewItem\n            key={idx}\n            schedule={schedule}\n            onDeleteBtnPressed={() => onScheduleDelete(schedule._id)}\n          />\n        ))}\n      </div>\n      <div className=\"col schedule-upload-container\">\n        <div className=\"text-center\">\n          <h3 className=\"text-light\">Upload Schedules Here:</h3>\n        </div>\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Schedule Title\"\n          onChange={e => onNewScheduleTitleSet(e.target.value)}\n        />\n        <SpreadSheetDropBox onSpreadSheetDropped={onNewScheduleDataSet} />\n        <button className=\"btn btn-success\" onClick={onUploadBtnPressed}>\n          Upload Schedule\n        </button>\n      </div>\n    </div>\n  </div>\n);\n\nexport default AdminScreen;\n","import { Schedule, Database } from '../types';\n\nclass ScheduleService {\n  storage: Database;\n\n  constructor(database: Database) {\n    this.storage = database;\n  }\n\n  async addSchedule(schedule: Schedule) {\n    return this.storage.push('schedules', schedule);\n  }\n\n  async removeSchedule(_id: firebase.database.Reference) {\n    console.log(typeof this);\n    return this.storage.delete('schedules', _id);\n  }\n\n  async getAllSchedules(): Promise<Schedule[]> {\n    return this._alphabetize(await this.storage.findAll('schedules'));\n\n  }\n\n  onSchedulesChanged(cb: (schedules: Schedule[]) => void) {\n    this.storage.onChange('schedules', data => cb(this._alphabetize(data)));\n  }\n\n  _alphabetize(schedules: Schedule[]) {\n    return schedules ? schedules.sort((a, b) => a.title > b.title ? 1 : a.title < b.title ? -1 : 0) : [];\n  }\n}\n\nfunction createScheduleManager(persistedStorage: Database) {\n  return new ScheduleService(persistedStorage);\n}\n\nexport default createScheduleManager;\n","import firebase from 'firebase';\n\nimport { Database, FirebaseConfig } from '../types';\n\nclass FirebaseManager implements Database {\n  db: firebase.database.Database;\n\n  constructor(config: FirebaseConfig) {\n    const app = firebase.initializeApp(config);\n    this.db = app.database();\n  }\n\n  async read(path: string) {\n    return this.db\n      .ref(path)\n      .once('value')\n      .then(s => s.val());\n  }\n\n  async write(path: string, data: any) {\n    return this.db.ref(path).set(data);\n  }\n\n  async push(basePath: string, data: any) {\n    return this.db.ref(basePath).push(data);\n  }\n\n  /** Gets all documents with their id's in collection */\n  async findAll(path: string) {\n    return this.db.ref(path).once('value')\n    .then(s => s.val() || {}).then(this._convertTsonToArrayWithIds)\n  }\n\n  async delete(path: string, _id: firebase.database.Reference) {\n    return this.db.ref(`${path}/${_id}`).remove();\n  }\n\n  onChange(path: string, cb: (data: any) => void) {\n    this.db.ref(path).on('value', (s) => cb(this._convertTsonToArrayWithIds(s.val())));\n  }\n\n  _convertTsonToArrayWithIds(obj: object) {\n    return Object.entries(obj).map(([_id, val]) => ({ _id, ...val }));\n  }\n}\n\nfunction createFirebaseDbManager(config: FirebaseConfig) {\n  return new FirebaseManager(config);\n}\n\nexport default createFirebaseDbManager;\n","import { FirebaseConfig } from '../types';\n\nimport createScheduleManager from './ScheduleService';\nimport createFirebaseDbManager from './DatabaseService';\n\nconst firebaseConfig: FirebaseConfig = {\n  apiKey: \"AIzaSyDUNiNW3dfplmHAq65wfKIGGSHS8MGXgzM\",\n  authDomain: \"sca-rab-schedules.firebaseapp.com\",\n  databaseURL: \"https://sca-rab-schedules.firebaseio.com\",\n  projectId: \"sca-rab-schedules\",\n  storageBucket: \"sca-rab-schedules.appspot.com\",\n  messagingSenderId: \"893196040077\",\n  appId: \"1:893196040077:web:75ee18b5d771028f616fc4\"\n}\n\nconst database = createFirebaseDbManager(firebaseConfig);\nconst scheduleManager = createScheduleManager(database);\n\nexport { scheduleManager };\n","import React, { useEffect, useState } from 'react';\nimport { Schedule } from '../types';\nimport { HomeScreen } from '../ui';\nimport { scheduleManager } from '../service';\n\nconst HomeScreenCreator = () => {\n  const [schedules, setSchedules] = useState<Schedule[]>([]);\n\n  useEffect(() => {\n    scheduleManager.onSchedulesChanged(setSchedules);\n  }, []);\n\n  return <HomeScreen schedules={schedules} />;\n};\n\nexport default HomeScreenCreator;\n","import React, { useEffect, useState } from 'react';\n\nimport { AdminScreen } from '../ui';\nimport { scheduleManager } from '../service';\nimport { Schedule, DataFrame } from '../types';\n\nconst AdminScreenCreator = () => {\n  const [currentSchedules, setCurrentSchedules] = useState<Schedule[]>([]);\n\n  const [scheduleData, setScheduleData] = useState<DataFrame>(undefined);\n  const [scheduleTitle, setScheduleTitle] = useState<string>('');\n\n  useEffect(() => {\n    scheduleManager.onSchedulesChanged(setCurrentSchedules);\n  }, []);\n\n  const uploadSchedule = () => {\n    if (!scheduleData) {\n      return alert('Please upload a spreadsheet first');\n    }\n    if (!scheduleTitle) {\n      return alert('Please enter the title of this table');\n    }\n\n    scheduleManager.addSchedule({\n      title: scheduleTitle,\n      rows: scheduleData,\n    });\n  };\n\n  const removeSchedule = _id => {\n    return scheduleManager.removeSchedule(_id);\n  };\n\n  return (\n    <AdminScreen\n      schedules={currentSchedules}\n      onNewScheduleTitleSet={setScheduleTitle}\n      onNewScheduleDataSet={setScheduleData}\n      onUploadBtnPressed={uploadSchedule}\n      onScheduleDelete={removeSchedule}\n    />\n  );\n};\n\nexport default AdminScreenCreator;\n","import React from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\n\nimport { HomeScreenCreator, AdminScreenCreator } from './factory';\n\nconst AppNavigator = () => (\n  <HashRouter basename=\"sca-schedules\">\n    <Route exact path=\"/\" component={HomeScreenCreator} />\n    <Route exact path=\"/admin\" component={AdminScreenCreator} />\n  </HashRouter>\n);\n\nexport default AppNavigator;\n","import React from 'react';\n\nimport AppNavigator from './AppNavigator';\nimport SCALogo from './ui/assets/SCALogo.png';\n\n// import * as linkify from 'linkifyjs';\n// import Linkify from 'linkifyjs/react';\n\nconst App = () => (\n  <>\n    <header className=\"navbar fixed-top bg-light shadow\">\n      <img className=\"navbar-brand py-0\" src={SCALogo} alt=\"SCA\" height=\"60\" />\n      <h5 className=\"w-100 text-center header-title m-0\">\n        Zoom Class Schedules:\n      </h5>\n    </header>\n    <div className=\"header-spacing\"></div>\n    {/* <Linkify\n      options={{\n        onClick: () => console.log('Link has been clicked'),\n      }}> */}\n    <AppNavigator />\n    {/* </Linkify> */}\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './ui/styles.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/SCALogo.b2d06419.png\";"],"sourceRoot":""}