{"version":3,"sources":["ui/components/ScheduleCard.tsx","ui/screens/Home.tsx","ui/components/SpreadSheetDropBox.tsx","ui/screens/Admin.tsx","service/ScheduleService.ts","service/DatabaseService.ts","service/index.ts","factory/HomeScreenCreator.tsx","factory/AdminScreenCreator.tsx","AppNavigator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ScheduleCard","schedule","title","rows","className","map","col","slice","row","HomeScreen","schedules","key","SpreadSheetDropBox","onSpreadSheetDropped","convertFileToDF","useCallback","file","excelFile","test","name","toLowerCase","alert","Promise","resolve","reader","FileReader","onload","e","data","target","result","workbook","xlsx","read","type","spreadSheet","Sheets","SheetNames","rowObjs","utils","sheet_to_json","header","Object","keys","concat","obj","onerror","ex","console","log","readAsArrayBuffer","then","useDropzone","onDrop","files","getRootProps","getInputProps","isDragActive","SchedulePreviewItem","onDeleteBtnPressed","_id","onClick","AdminScreen","onNewScheduleTitleSet","onNewScheduleDataSet","onUploadBtnPressed","onScheduleDelete","idx","placeholder","onChange","value","ScheduleService","database","storage","this","push","delete","findAll","cb","createScheduleManager","persistedStorage","FirebaseManager","config","db","app","firebase","initializeApp","path","ref","once","s","val","set","basePath","_convertTsonToArrayWithIds","remove","on","entries","createFirebaseDbManager","scheduleManager","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","HomeScreenCreator","useState","setSchedules","useEffect","onSchedulesChanged","Home","AdminScreenCreator","currentSchedules","setCurrentSchedules","undefined","scheduleData","setScheduleData","scheduleTitle","setScheduleTitle","Admin","addSchedule","removeSchedule","AppNavigator","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qUAkCeA,EA1BmC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC3CC,EAAgBD,EAAhBC,MAAOC,EAASF,EAATE,KAEf,OACE,6BACE,4BAAKD,GACL,2BAAOE,UAAU,SACf,+BACE,4BACGD,EAAK,GAAGE,KAAI,SAAAC,GAAG,OACd,4BAAKA,QAIVH,EAAKI,MAAM,GAAGF,KAAI,SAAAG,GAAG,OACpB,4BACGA,EAAIH,KAAI,SAAAC,GAAG,OACV,4BAAKA,aCNJG,EAV+B,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAC/C,OACE,yBAAKN,UAAU,aACZM,EAAUL,KAAI,SAAAJ,GAAQ,OACrB,kBAAC,EAAD,CAAcU,IAAKV,EAASC,MAAOD,SAAUA,S,yBCgDtCW,EA9BY,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,qBACtBC,EAAkBC,uBACtB,SAACC,GACC,IA3B0BC,EA6B1B,IAFiB,wCAEHC,KAAKF,EAAKG,KAAKC,eAC3B,OAAOC,MAAM,yDA9BWJ,EAiCHD,EAhC3B,IAAIM,SAAmB,SAAAC,GACrB,IAAIC,EAAS,IAAIC,WAEjBD,EAAOE,OAAS,SAASC,GACvB,IAAMC,EAAOD,EAAEE,OAAOC,OAChBC,EAAWC,IAAKC,KAAKL,EAAM,CAAEM,KAAM,UACnCC,EAAcJ,EAASK,OAAOL,EAASM,WAAW,IAElDC,EAAUN,IAAKO,MAAMC,cAAcL,GACnCM,EAASC,OAAOC,KAAKL,EAAQ,IAC7BnC,EAAkB,CAACsC,GAAQG,OAC/BN,EAAQjC,KAAI,SAAAwC,GAAG,OAAIJ,EAAOpC,KAAI,SAAAM,GAAG,OAAIkC,EAAIlC,UAE3CY,EAAQpB,IAGVqB,EAAOsB,QAAU,SAASC,GACxBC,QAAQC,IAAIF,IAGdvB,EAAO0B,kBAAkBjC,OAYMkC,KAAKtC,KAEpC,CAACA,IAXoD,EAcDuC,YAAY,CAChEC,OAAQ,SAACC,GAAD,OAAmBxC,EAAgBwC,EAAM,OAD3CC,EAd+C,EAc/CA,aAAcC,EAdiC,EAcjCA,cAAeC,EAdkB,EAclBA,aAIrC,OACE,yCAASF,IAAT,CAAyBnD,UAAU,iBACjC,0BAAWoD,KACVC,EACC,oDAEA,qDC9CFC,EAA0D,SAAC,GAAD,IAC9DzD,EAD8D,EAC9DA,SACA0D,EAF8D,EAE9DA,mBAF8D,OAI9D,yBAAKvD,UAAU,mCACb,4BACGH,EAASC,MADZ,KACqBD,EAAS2D,IAD9B,KAGA,4BAAQxD,UAAU,wBAAwByD,QAASF,GAAnD,OAkDWG,EApCiC,SAAC,GAM1C,IALLpD,EAKI,EALJA,UACAqD,EAII,EAJJA,sBACAC,EAGI,EAHJA,qBACAC,EAEI,EAFJA,mBACAC,EACI,EADJA,iBAEA,OACE,yBAAK9D,UAAU,wBACb,yBAAKA,UAAU,+BACb,yBAAKA,UAAU,sBACZM,EAAUL,KAAI,SAACJ,EAAUkE,GAAX,OACb,kBAAC,EAAD,CACExD,IAAKwD,EACLlE,SAAUA,EACV0D,mBAAoB,kBAAMO,EAAiBjE,EAAS2D,YAI1D,yBAAKxD,UAAU,WACb,2BACE8B,KAAK,OACL9B,UAAU,eACVgE,YAAY,iBACZC,SAAU,SAAA1C,GAAC,OAAIoC,EAAsBpC,EAAEE,OAAOyC,UAEhD,kBAAC,EAAD,CAAoBzD,qBAAsBmD,IAC1C,4BAAQ5D,UAAU,kBAAkByD,QAASI,GAA7C,uB,wCCxDJM,E,WAGJ,WAAYC,GAAqB,yBAFjCC,aAEgC,EAC9BC,KAAKD,QAAUD,E,iGAGCvE,G,0FACTyE,KAAKD,QAAQE,KAAK,YAAa1E,I,qLAGnB2D,G,wEACnBZ,QAAQC,WAAWyB,M,kBACZA,KAAKD,QAAQG,OAAO,YAAahB,I,yQAI3Bc,KAAKD,QAAQI,QAAQ,a,gDAAgB,G,qLAIjCC,GACjB9B,QAAQC,IAAIyB,MACZA,KAAKD,QAAQJ,SAAS,aAAa,SAAAzC,GAAI,OAAIkD,EAAGlD,GAAQ,W,KAQ3CmD,MAJf,SAA+BC,GAC7B,OAAO,IAAIT,EAAgBS,I,yBC1BvBC,E,WAGJ,WAAYC,GAAyB,yBAFrCC,QAEoC,EAClC,IAAMC,EAAMC,IAASC,cAAcJ,GACnCR,KAAKS,GAAKC,EAAIZ,W,0FAGLe,G,0FACFb,KAAKS,GACTK,IAAID,GACJE,KAAK,SACLtC,MAAK,SAAAuC,GAAC,OAAIA,EAAEC,U,4KAGLJ,EAAc3D,G,0FACjB8C,KAAKS,GAAGK,IAAID,GAAMK,IAAIhE,I,6KAGpBiE,EAAkBjE,G,0FACpB8C,KAAKS,GAAGK,IAAIK,GAAUlB,KAAK/C,I,gLAItB2D,G,0FACLb,KAAKS,GAAGK,IAAID,GAAME,KAAK,SAC7BtC,MAAK,SAAAuC,GAAC,OAAIA,EAAEC,OAAS,MAAIxC,KAAKuB,KAAKoB,6B,6KAGzBP,EAAc3B,G,0FAClBc,KAAKS,GAAGK,IAAR,UAAeD,EAAf,YAAuB3B,IAAOmC,U,wIAG9BR,EAAcT,GAA0B,IAAD,OAC9CJ,KAAKS,GAAGK,IAAID,GAAMS,GAAG,SAAS,SAACN,GAAD,OAAOZ,EAAG,EAAKgB,2BAA2BJ,EAAEC,a,iDAGjD9C,GACzB,OAAOH,OAAOuD,QAAQpD,GAAKxC,KAAI,mCAAEuD,EAAF,KAAO+B,EAAP,yBAAmB/B,OAAQ+B,U,KAQ/CO,IClCTC,EAAkBpB,ED8BxB,SAAiCG,GAC/B,OAAO,IAAID,EAAgBC,GChCZgB,CAVsB,CACrCE,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,+CCGMC,EAVW,WAAO,IAAD,EACIC,mBAAqB,IADzB,mBACvBlG,EADuB,KACZmG,EADY,KAO9B,OAJAC,qBAAU,WACRX,EAAgBY,mBAAmBF,KAClC,IAEI,kBAACG,EAAD,CAAYtG,UAAWA,KCiCjBuG,EAvCY,WAAO,IAAD,EACiBL,mBAAqB,IADtC,mBACxBM,EADwB,KACNC,EADM,OAGSP,wBAAoBQ,GAH7B,mBAGxBC,EAHwB,KAGVC,EAHU,OAIWV,mBAAiB,IAJ5B,mBAIxBW,EAJwB,KAITC,EAJS,KAM/BV,qBAAU,WACRX,EAAgBY,mBAAmBI,KAClC,IAoBH,OACE,kBAACM,EAAD,CACE/G,UAAWwG,EACXnD,sBAAuByD,EACvBxD,qBAAsBsD,EACtBrD,mBAvBmB,WACrB,OAAKoD,EAGAE,OAILpB,EAAgBuB,YAAY,CAC1BxH,MAAOqH,EACPpH,KAAMkH,IALChG,MAAM,wCAHNA,MAAM,sCAsBb6C,iBAVmB,SAAAN,GACrB,OAAOuC,EAAgBwB,eAAe/D,OCnB3BgE,EAPM,kBACnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACtC,KAAK,IAAIuC,UAAWnB,IACjC,kBAAC,IAAD,CAAOkB,OAAK,EAACtC,KAAK,SAASuC,UAAWb,MCF3Bc,EAFH,kBAAM,kBAAC,EAAD,OCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxF,MAAK,SAAAyF,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/F,QAAQ+F,MAAMA,EAAMC,c","file":"static/js/main.4a1a715c.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Schedule } from '../../types';\n\ninterface ScheduleCardProps {\n  schedule: Schedule;\n}\n\nconst ScheduleCard: React.FC<ScheduleCardProps> = ({ schedule }) => {\n  const { title, rows } = schedule;\n\n  return (\n    <div>\n      <h1>{title}</h1>\n      <table className=\"table\">\n        <thead>\n          <tr>\n            {rows[0].map(col => (\n              <th>{col}</th>\n            ))}\n          </tr>\n        </thead>\n        {rows.slice(1).map(row => (\n          <tr>\n            {row.map(col => (\n              <td>{col}</td>\n            ))}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default ScheduleCard;\n","import React from 'react';\nimport { ScheduleCard } from '../components';\n\nimport { Schedule } from '../../types';\n\ninterface HomeScreenProps {\n  schedules: Schedule[];\n}\n\nconst HomeScreen: React.FC<HomeScreenProps> = ({ schedules }) => {\n  return (\n    <div className=\"container\">\n      {schedules.map(schedule => (\n        <ScheduleCard key={schedule.title} schedule={schedule} />\n      ))}\n    </div>\n  );\n};\n\nexport default HomeScreen;\n","import React, { useCallback } from 'react';\nimport xlsx from 'xlsx';\n\nimport { useDropzone } from 'react-dropzone';\n\nimport { DataFrame } from '../../types';\n\nconst dataframeFromExcelFile = (excelFile: File) =>\n  new Promise<DataFrame>(resolve => {\n    var reader = new FileReader();\n\n    reader.onload = function(e) {\n      const data = e.target.result;\n      const workbook = xlsx.read(data, { type: 'array' });\n      const spreadSheet = workbook.Sheets[workbook.SheetNames[0]];\n\n      const rowObjs = xlsx.utils.sheet_to_json(spreadSheet);\n      const header = Object.keys(rowObjs[0]);\n      const rows: DataFrame = [header].concat(\n        rowObjs.map(obj => header.map(key => obj[key])),\n      );\n      resolve(rows);\n    };\n\n    reader.onerror = function(ex) {\n      console.log(ex);\n    };\n\n    reader.readAsArrayBuffer(excelFile);\n  });\n\nconst SpreadSheetDropBox = ({ onSpreadSheetDropped }) => {\n  const convertFileToDF = useCallback(\n    (file: File) => {\n      const excelExt = /^([a-zA-Z0-9\\s_\\\\.\\-:])+(.xls|.xlsx)$/;\n\n      if (!excelExt.test(file.name.toLowerCase())) {\n        return alert('Only files with .xlsx or .xls extentions are allowed');\n      }\n\n      dataframeFromExcelFile(file).then(onSpreadSheetDropped);\n    },\n    [onSpreadSheetDropped],\n  );\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop: (files: File[]) => convertFileToDF(files[0]),\n  });\n\n  return (\n    <div {...getRootProps()} className=\"file-dropper\">\n      <input {...getInputProps()} />\n      {isDragActive ? (\n        <p>Drop spreadsheet here</p>\n      ) : (\n        <p>SpreadSheet Uploader</p>\n      )}\n    </div>\n  );\n};\n\nexport default SpreadSheetDropBox;\n","import React from 'react';\n\nimport SpreadSheetDropBox from '../components/SpreadSheetDropBox';\nimport { Schedule, DataFrame } from '../../types';\n\ninterface SchedulePreviewItemProps {\n  schedule: Schedule;\n  onDeleteBtnPressed: () => void;\n}\nconst SchedulePreviewItem: React.FC<SchedulePreviewItemProps> = ({\n  schedule,\n  onDeleteBtnPressed,\n}) => (\n  <div className=\"justify-content-between m-2 row\">\n    <h3>\n      {schedule.title} ({schedule._id})\n    </h3>\n    <button className=\"btn btn-md btn-danger\" onClick={onDeleteBtnPressed}>\n      x\n    </button>\n  </div>\n);\n\ninterface AdminScreenProps {\n  schedules: Schedule[];\n  onNewScheduleTitleSet: (title: string) => void;\n  onNewScheduleDataSet: (rows: DataFrame) => void;\n  onUploadBtnPressed: () => void;\n  onScheduleDelete: (_id: firebase.database.Reference) => Promise<boolean>;\n}\n\nconst AdminScreen: React.FC<AdminScreenProps> = ({\n  schedules,\n  onNewScheduleTitleSet,\n  onNewScheduleDataSet,\n  onUploadBtnPressed,\n  onScheduleDelete,\n}) => {\n  return (\n    <div className=\"admin-page-container\">\n      <div className=\"schedule-manager-widget row\">\n        <div className=\"col scroll-content\">\n          {schedules.map((schedule, idx) => (\n            <SchedulePreviewItem\n              key={idx}\n              schedule={schedule}\n              onDeleteBtnPressed={() => onScheduleDelete(schedule._id)}\n            />\n          ))}\n        </div>\n        <div className=\"col p-0\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Schedule Title\"\n            onChange={e => onNewScheduleTitleSet(e.target.value)}\n          />\n          <SpreadSheetDropBox onSpreadSheetDropped={onNewScheduleDataSet} />\n          <button className=\"btn btn-success\" onClick={onUploadBtnPressed}>\n            Upload Schedule\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminScreen;\n","import { Schedule, Database } from '../types';\n\nclass ScheduleService {\n  storage: Database;\n\n  constructor(database: Database) {\n    this.storage = database;\n  }\n\n  async addSchedule(schedule: Schedule) {\n    return this.storage.push('schedules', schedule);\n  }\n\n  async removeSchedule(_id: firebase.database.Reference) {\n    console.log(typeof this);\n    return this.storage.delete('schedules', _id);\n  }\n\n  async getAllSchedules(): Promise<Schedule[]> {\n    return await this.storage.findAll('schedules') || [];\n\n  }\n\n  onSchedulesChanged(cb: (schedules: Schedule[]) => void) {\n    console.log(this);\n    this.storage.onChange('schedules', data => cb(data || []));\n  }\n}\n\nfunction createScheduleManager(persistedStorage: Database) {\n  return new ScheduleService(persistedStorage);\n}\n\nexport default createScheduleManager;\n","import firebase from 'firebase';\n\nimport { Database, FirebaseConfig } from '../types';\n\nclass FirebaseManager implements Database {\n  db: firebase.database.Database;\n\n  constructor(config: FirebaseConfig) {\n    const app = firebase.initializeApp(config);\n    this.db = app.database();\n  }\n\n  async read(path: string) {\n    return this.db\n      .ref(path)\n      .once('value')\n      .then(s => s.val());\n  }\n\n  async write(path: string, data: any) {\n    return this.db.ref(path).set(data);\n  }\n\n  async push(basePath: string, data: any) {\n    return this.db.ref(basePath).push(data);\n  }\n\n  /** Gets all documents with their id's in collection */\n  async findAll(path: string) {\n    return this.db.ref(path).once('value')\n    .then(s => s.val() || {}).then(this._convertTsonToArrayWithIds)\n  }\n\n  async delete(path: string, _id: firebase.database.Reference) {\n    return this.db.ref(`${path}/${_id}`).remove();\n  }\n\n  onChange(path: string, cb: (data: any) => void) {\n    this.db.ref(path).on('value', (s) => cb(this._convertTsonToArrayWithIds(s.val())));\n  }\n\n  _convertTsonToArrayWithIds(obj: object) {\n    return Object.entries(obj).map(([_id, val]) => ({ _id, ...val }));\n  }\n}\n\nfunction createFirebaseDbManager(config: FirebaseConfig) {\n  return new FirebaseManager(config);\n}\n\nexport default createFirebaseDbManager;\n","import { FirebaseConfig } from '../types';\n\nimport createScheduleManager from './ScheduleService';\nimport createFirebaseDbManager from './DatabaseService';\n\nconst firebaseConfig: FirebaseConfig = {\n  apiKey: \"AIzaSyDUNiNW3dfplmHAq65wfKIGGSHS8MGXgzM\",\n  authDomain: \"sca-rab-schedules.firebaseapp.com\",\n  databaseURL: \"https://sca-rab-schedules.firebaseio.com\",\n  projectId: \"sca-rab-schedules\",\n  storageBucket: \"sca-rab-schedules.appspot.com\",\n  messagingSenderId: \"893196040077\",\n  appId: \"1:893196040077:web:75ee18b5d771028f616fc4\"\n}\n\nconst database = createFirebaseDbManager(firebaseConfig);\nconst scheduleManager = createScheduleManager(database);\n\nexport { scheduleManager };\n","import React, { useEffect, useState } from 'react';\nimport { Schedule } from '../types';\nimport { HomeScreen } from '../ui';\nimport { scheduleManager } from '../service';\n\nconst HomeScreenCreator = () => {\n  const [schedules, setSchedules] = useState<Schedule[]>([]);\n\n  useEffect(() => {\n    scheduleManager.onSchedulesChanged(setSchedules);\n  }, []);\n\n  return <HomeScreen schedules={schedules} />;\n};\n\nexport default HomeScreenCreator;\n","import React, { useEffect, useState } from 'react';\n\nimport { AdminScreen } from '../ui';\nimport { scheduleManager } from '../service';\nimport { Schedule, DataFrame } from '../types';\n\nconst AdminScreenCreator = () => {\n  const [currentSchedules, setCurrentSchedules] = useState<Schedule[]>([]);\n\n  const [scheduleData, setScheduleData] = useState<DataFrame>(undefined);\n  const [scheduleTitle, setScheduleTitle] = useState<string>('');\n\n  useEffect(() => {\n    scheduleManager.onSchedulesChanged(setCurrentSchedules);\n  }, []);\n\n  const uploadSchedule = () => {\n    if (!scheduleData) {\n      return alert('Please upload a spreadsheet first');\n    }\n    if (!scheduleTitle) {\n      return alert('Please enter the title of this table');\n    }\n\n    scheduleManager.addSchedule({\n      title: scheduleTitle,\n      rows: scheduleData,\n    });\n  };\n\n  const removeSchedule = _id => {\n    return scheduleManager.removeSchedule(_id);\n  };\n\n  return (\n    <AdminScreen\n      schedules={currentSchedules}\n      onNewScheduleTitleSet={setScheduleTitle}\n      onNewScheduleDataSet={setScheduleData}\n      onUploadBtnPressed={uploadSchedule}\n      onScheduleDelete={removeSchedule}\n    />\n  );\n};\n\nexport default AdminScreenCreator;\n","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nimport { HomeScreenCreator, AdminScreenCreator } from './factory';\n\nconst AppNavigator = () => (\n  <BrowserRouter>\n    <Route exact path=\"/\" component={HomeScreenCreator} />\n    <Route exact path=\"/admin\" component={AdminScreenCreator} />\n  </BrowserRouter>\n);\n\nexport default AppNavigator;\n","import React from 'react';\n\nimport AppNavigator from './AppNavigator';\n\nconst App = () => <AppNavigator />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './ui/styles.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}