{"version":3,"sources":["ui/assets/SCALogo.png","util.ts","ui/components/ScheduleCard.tsx","ui/components/SpreadSheetDropBox.tsx","ui/components/ImageDropBox.tsx","ui/screens/Home.tsx","ui/screens/Admin.tsx","service/ScheduleService.ts","service/DatabaseService.ts","service/index.ts","factory/HomeScreenCreator.tsx","factory/AdminScreenCreator.tsx","AppNavigator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","cleanExcelData","d","map","rows","col","string","data","Date","moment","format","adjustExcelTime","convertJsonToArrayWithIds","obj","Object","entries","_id","val","SmartText","input","highlight","urls","linkify","length","className","value","type","href","ScheduleCard","schedule","filter","title","logo","filteredRows","filterType","filterVal","header","searchableColIndex","findIndex","key","toLowerCase","includes","slice","row","cellText","replace","concat","filterDataFrameRows","match","filterColIdx","shouldHighlight","colText","colIdx","text","src","idx","rIdx","cIdx","SpreadSheetDropBox","onSpreadSheetDropped","useState","undefined","droppedFileName","setDroppedFileName","dataRows","setDataRows","useDropzone","onDrop","files","excelFile","file","test","name","alert","Promise","resolve","reader","FileReader","onload","e","target","result","workbook","xlsx","read","spreadSheet","Sheets","SheetNames","rowObjs","utils","sheet_to_json","keys","readAsArrayBuffer","then","getRootProps","getInputProps","isDragActive","ImageDropBox","onImageDropped","previewImage","setPreviewImage","image","onloadend","readAsDataURL","base64URL","HomeScreen","schedules","setfilterType","setFilterVal","htmlFor","onChange","id","placeholder","SchedulePreviewItem","onDeleteBtnPressed","onClick","AdminScreen","onNewScheduleTitleSet","onNewScheduleDataSet","onNewScheduleLogoSet","onUploadBtnPressed","onScheduleDelete","ScheduleService","database","storage","this","push","delete","newSchedule","write","findAll","_alphabetize","cb","sort","a","b","createScheduleManager","persistedStorage","FirebaseManager","config","db","app","firebase","initializeApp","path","ref","once","s","set","basePath","remove","on","createFirebaseDbManager","scheduleManager","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","HomeScreenCreator","setSchedules","useEffect","onSchedulesChanged","Home","AdminScreenCreator","currentSchedules","setCurrentSchedules","scheduleData","setScheduleData","scheduleTitle","setScheduleTitle","scheduleLogo","setScheduleLogo","Admin","addSchedule","removeSchedule","AppNavigator","exact","component","App","SCALogo","alt","height","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.093f12cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SCALogo.b2d06419.png\";","import moment from 'moment';\nimport xlsx from 'xlsx';\n\nimport { DataFrame } from './types';\n\nexport const dataframeFromExcelFile = (excelFile: File) =>\n  new Promise<DataFrame>(resolve => {\n    var reader = new FileReader();\n\n    reader.onload = function(e) {\n      const data = e.target.result;\n      const workbook = xlsx.read(data, { type: 'array' });\n      const spreadSheet = workbook.Sheets[workbook.SheetNames[0]];\n\n      const rowObjs = xlsx.utils.sheet_to_json(spreadSheet);\n      const header = Object.keys(rowObjs[0]);\n      const rows: DataFrame = [header].concat(\n        rowObjs.map(obj => header.map(key => obj[key])),\n      );\n      resolve(cleanExcelData(rows));\n    };\n\n    reader.readAsArrayBuffer(excelFile);\n  });\n\nexport const convertImageFileToBase64Str = (image: File) => \n  new Promise<string | ArrayBuffer>(resolve => {\n    const reader = new FileReader();\n    reader.onloadend = function (e) {\n      resolve(e.target.result);\n    }\n    reader.readAsDataURL(image);\n  });\n    \n\nexport const adjustExcelTime = string => {\n    if (typeof string === 'string') return string;\n    const timeInMiliSeconds = (string - (25567 + 1)) * 86400 * 1000;\n    const fiveHours = 1000 * 60 * 60 * 5;\n    const data = new Date(timeInMiliSeconds + fiveHours);\n    return moment(data).format('LT');\n};\n\nexport const cleanExcelData = (d: DataFrame) => \n    d.map(rows => rows.map(col => adjustExcelTime(col)));\n\n\nexport const convertJsonToArrayWithIds = (obj: object) =>\n    Object.entries(obj).map(([_id, val]) => ({ _id, ...val }));\n\nexport const filterDataFrameRows = (filterType: string, filterVal: string, data: DataFrame) => {\n    const header = [...data[0]];\n    const searchableColIndex = header.findIndex(key =>\n        key.toLowerCase().includes(filterType)\n    );\n    if (searchableColIndex === -1) { // This table doesn't have a column for specified filterType\n        return [header];\n    }\n    const filteredRows = data.slice(1).filter(row => {\n        let cellText = row[searchableColIndex];\n        if (filterType === 'time') cellText = cellText.replace(':', '');\n        return cellText.toLowerCase().includes(filterVal.toLowerCase());\n    });\n    return [header].concat(filteredRows);\n}\n\n","import React from 'react';\n\nimport * as linkify from 'linkifyjs';\nimport { Schedule } from '../../types';\nimport { filterDataFrameRows } from '../../util';\n\ninterface ScheduleCardProps {\n  schedule: Schedule;\n  filter?: {\n    /** The column in the header to look for */\n    type: string;\n    /** The string to compare cells with */\n    match: string;\n  };\n  stringToHighlight?: string;\n}\n\ninterface SmartTextProps {\n  input: string;\n  highlight?: boolean;\n}\n/** If input contains a link, SmartText will replace it with a clickable ancor tag */\nconst SmartText: React.FC<SmartTextProps> = ({ input, highlight }) => {\n  const urls = linkify.find(input);\n  if (urls.length === 0) {\n    return <p className={highlight && 'highlight'}>{input}</p>;\n  }\n  const { value, type } = urls[0];\n  return <a href={value}>{type === 'url' ? 'Click me' : value}</a>;\n};\n\nconst ScheduleCard: React.FC<ScheduleCardProps> = ({ schedule, filter }) => {\n  const { title, rows, logo } = schedule;\n\n  const filteredRows = filter\n    ? filterDataFrameRows(filter.type, filter.match, rows)\n    : rows;\n\n  if (filteredRows.length === 1) {\n    // No rows matched the filter criteria\n    return null;\n  }\n\n  const filterColIdx =\n    filter && rows[0].findIndex(col => col.toLowerCase().includes(filter.type));\n\n  const shouldHighlight = (colText: string, colIdx) => {\n    const text = colText.toLowerCase();\n    return filterColIdx === colIdx\n      ? filter.type === 'time'\n        ? text.replace(':', '').includes(filter.match)\n        : text.includes(filter.match)\n      : false;\n  };\n\n  return (\n    <div className=\"schedule-card my-5\">\n      <div className=\"card-header row\">\n        {!!logo && <img src={logo} className=\"logo\" />}\n        <h1 className=\"schedule-title\">{title}</h1>\n      </div>\n      <table className=\"table table-striped table-bordered table-hover shadow\">\n        <thead className=\"text-light\">\n          <tr>\n            {filteredRows[0].map((col, idx) => (\n              <th key={idx}>{col}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {filteredRows.slice(1).map((row, rIdx) => (\n            <tr key={rIdx}>\n              {row.map((col, cIdx) => (\n                <td key={cIdx}>\n                  <SmartText\n                    input={col}\n                    highlight={shouldHighlight(col, cIdx)}\n                  />\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default ScheduleCard;\n","import React, { useCallback, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\n\nimport { DataFrame } from '../../types';\nimport { dataframeFromExcelFile } from '../../util';\n\nimport ScheduleCard from './ScheduleCard';\n\ninterface SpreadSheetDropBoxProps {\n  onSpreadSheetDropped: (data: DataFrame) => void;\n}\n\nconst SpreadSheetDropBox: React.FC<SpreadSheetDropBoxProps> = ({\n  onSpreadSheetDropped,\n}) => {\n  const [droppedFileName, setDroppedFileName] = useState(undefined);\n  const [dataRows, setDataRows] = useState<DataFrame>(undefined);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop: (files: File[]) => {\n      const file = files[0];\n      const excelExt = /^([a-zA-Z0-9\\s_\\\\.\\-:])+(.xls|.xlsx)$/;\n      if (!excelExt.test(file.name.toLowerCase())) {\n        return alert(\n          'Only files with .xlsx or .xls extentions are allowed here.',\n        );\n      }\n      setDroppedFileName(file.name);\n      dataframeFromExcelFile(file).then(rows => {\n        setDataRows(rows);\n        onSpreadSheetDropped(rows);\n      });\n    },\n  });\n\n  return (\n    <div {...getRootProps()} className=\"file-dropper scroll-content p-4 my-2\">\n      <input {...getInputProps()} />\n      {!droppedFileName && (\n        <p>\n          Drop excel file here\n          <br />\n          (or click to choose file)\n        </p>\n      )}\n      {!!droppedFileName && <p>{droppedFileName}</p>}\n      {!!dataRows && <ScheduleCard schedule={{ title: '', rows: dataRows }} />}\n    </div>\n  );\n};\n\nexport default SpreadSheetDropBox;\n","import React, { useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\n\nimport { convertImageFileToBase64Str } from '../../util';\n\ninterface ImageDropBoxProps {\n  onImageDropped: (image: string | ArrayBuffer) => void;\n}\nconst ImageDropBox: React.FC<ImageDropBoxProps> = ({ onImageDropped }) => {\n  const [previewImage, setPreviewImage] = useState(undefined);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop: (files: File[]) => {\n      const file = files[0];\n      const imageExt = /^([a-zA-Z0-9\\s_\\\\.\\-:])+(.jpg|.jpeg|.png)$/;\n      if (!imageExt.test(file.name.toLowerCase())) {\n        return alert(\n          'Only files with .jpg or .jpeg or .png extensions are allowed here.',\n        );\n      }\n      convertImageFileToBase64Str(file).then(base64URL => {\n        setPreviewImage(base64URL);\n        onImageDropped(base64URL);\n      });\n    },\n  });\n\n  return (\n    <div {...getRootProps()} className=\"image-dropper mt-2\">\n      <input {...getInputProps()} />\n      <p>\n        Drop logo here\n        <br />\n        (or click to choose file)\n      </p>\n      {!!previewImage && <img src={previewImage} className=\"logo\" />}\n    </div>\n  );\n};\n\nexport default ImageDropBox;\n","import React, { useState } from 'react';\nimport { ScheduleCard } from '../components';\n\nimport { Schedule } from '../../types';\n\ninterface HomeScreenProps {\n  schedules: Schedule[];\n}\n\nconst HomeScreen: React.FC<HomeScreenProps> = ({ schedules }) => {\n  const [filterType, setfilterType] = useState<string>('none');\n  const [filterVal, setFilterVal] = useState<string>('');\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"input-group mt-3\">\n          <label htmlFor=\"filter\" className=\"header-title\">\n            Filter By:{' '}\n            <select\n              name=\"filter\"\n              onChange={e => setfilterType(e.target.value)}\n              id=\"\"\n              value={filterType}>\n              <option value=\"none\">No filter</option>\n              <option value=\"time\">Time of day</option>\n              <option value=\"day\">Day of week</option>\n              <option value=\"class\">Class</option>\n              <option value=\"rabbi\">Rabbi</option>\n            </select>\n            {filterType !== 'none' && (\n              <input\n                type=\"text\"\n                className=\"ml-2\"\n                onChange={e => setFilterVal(e.target.value.toLowerCase())}\n                placeholder={`Enter ${filterType}(s)`}\n              />\n            )}\n          </label>\n        </div>\n        {schedules.map(schedule => {\n          return (\n            <ScheduleCard\n              key={schedule.title}\n              schedule={schedule}\n              filter={\n                !(filterType === 'none' || filterVal === '') && {\n                  type: filterType,\n                  match: filterVal,\n                }\n              }\n            />\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default HomeScreen;\n","import React from 'react';\n\nimport { SpreadSheetDropBox, ImageDropBox } from '../components';\nimport { Schedule, DataFrame } from '../../types';\n\ninterface SchedulePreviewItemProps {\n  schedule: Schedule;\n  onDeleteBtnPressed: () => void;\n}\nconst SchedulePreviewItem: React.FC<SchedulePreviewItemProps> = ({\n  schedule,\n  onDeleteBtnPressed,\n}) => (\n  <li className=\"list-group-item d-flex justify-content-between my-2\">\n    <h3>{schedule.title}</h3>\n    <button className=\"btn btn-md btn-danger\" onClick={onDeleteBtnPressed}>\n      x\n    </button>\n  </li>\n);\n\ninterface AdminScreenProps {\n  schedules: Schedule[];\n  onNewScheduleTitleSet: (title: string) => void;\n  onNewScheduleDataSet: (rows: DataFrame) => void;\n  onNewScheduleLogoSet: (logo: string) => void;\n  onUploadBtnPressed: () => void;\n  onScheduleDelete: (_id: firebase.database.Reference) => Promise<boolean>;\n}\n\nconst AdminScreen: React.FC<AdminScreenProps> = ({\n  schedules,\n  onNewScheduleTitleSet,\n  onNewScheduleDataSet,\n  onNewScheduleLogoSet,\n  onUploadBtnPressed,\n  onScheduleDelete,\n}) => (\n  <div className=\"admin-page-container\">\n    <div className=\"schedule-manager-widget row mt-5 py-5\">\n      <div className=\"col scroll-content\">\n        {schedules.map((schedule, idx) => (\n          <SchedulePreviewItem\n            key={idx}\n            schedule={schedule}\n            onDeleteBtnPressed={() => onScheduleDelete(schedule._id)}\n          />\n        ))}\n      </div>\n      <div className=\"col schedule-upload-container\">\n        <div className=\"text-center\">\n          <h3 className=\"text-light\">Upload Schedules Here:</h3>\n        </div>\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Schedule Title\"\n          onChange={e => onNewScheduleTitleSet(e.target.value)}\n        />\n        <ImageDropBox onImageDropped={onNewScheduleLogoSet} />\n        <SpreadSheetDropBox onSpreadSheetDropped={onNewScheduleDataSet} />\n        <button className=\"btn btn-success\" onClick={onUploadBtnPressed}>\n          Upload Schedule\n        </button>\n      </div>\n    </div>\n  </div>\n);\n\nexport default AdminScreen;\n","import { Schedule, Database } from '../types';\n\nclass ScheduleService {\n  private storage: Database;\n\n  constructor(database: Database) {\n    this.storage = database;\n  }\n\n  async addSchedule(schedule: Schedule) {\n    return this.storage.push('schedules', schedule);\n  }\n\n  async removeSchedule(_id: firebase.database.Reference) {\n    return this.storage.delete('schedules', _id);\n  }\n\n  async updateSchedule(_id: firebase.database.Reference, newSchedule: Schedule) {\n    return this.storage.write(`schedules/${_id}`, newSchedule);\n  }\n\n  async getAllSchedules(): Promise<Schedule[]> {\n    return this._alphabetize(await this.storage.findAll('schedules'));\n  }\n\n  onSchedulesChanged(cb: (schedules: Schedule[]) => void) {\n    this.storage.onChange('schedules', data => cb(this._alphabetize(data)));\n  }\n\n  _alphabetize(schedules: Schedule[]) {\n    return schedules ? schedules.sort((a, b) => a.title > b.title ? 1 : a.title < b.title ? -1 : 0) : [];\n  }\n}\n\nfunction createScheduleManager(persistedStorage: Database) {\n  return new ScheduleService(persistedStorage);\n}\n\nexport default createScheduleManager;\n","import firebase from 'firebase';\n\nimport { Database, FirebaseConfig } from '../types';\nimport { convertJsonToArrayWithIds } from '../util';\n\nclass FirebaseManager implements Database {\n  db: firebase.database.Database;\n\n  constructor(config: FirebaseConfig) {\n    const app = firebase.initializeApp(config);\n    this.db = app.database();\n  }\n\n  async read(path: string) {\n    return this.db\n      .ref(path)\n      .once('value')\n      .then(s => s.val());\n  }\n\n  async write(path: string, data: any) {\n    return this.db.ref(path).set(data);\n  }\n\n  async push(basePath: string, data: any) {\n    return this.db.ref(basePath).push(data);\n  }\n\n  /** Gets all documents with their id's in collection */\n  async findAll(path: string) {\n    return this.db.ref(path).once('value')\n    .then(s => s.val() || {}).then(convertJsonToArrayWithIds)\n  }\n\n  async delete(path: string, _id: firebase.database.Reference) {\n    return this.db.ref(`${path}/${_id}`).remove();\n  }\n\n  onChange(path: string, cb: (data: any) => void) {\n    this.db.ref(path).on('value', (s) => cb(convertJsonToArrayWithIds(s.val())));\n  }\n\n}\n\nfunction createFirebaseDbManager(config: FirebaseConfig) {\n  return new FirebaseManager(config);\n}\n\nexport default createFirebaseDbManager;\n","import { FirebaseConfig } from '../types';\n\nimport createScheduleManager from './ScheduleService';\nimport createFirebaseDbManager from './DatabaseService';\n\nconst firebaseConfig: FirebaseConfig = {\n  apiKey: \"AIzaSyDUNiNW3dfplmHAq65wfKIGGSHS8MGXgzM\",\n  authDomain: \"sca-rab-schedules.firebaseapp.com\",\n  databaseURL: \"https://sca-rab-schedules.firebaseio.com\",\n  projectId: \"sca-rab-schedules\",\n  storageBucket: \"sca-rab-schedules.appspot.com\",\n  messagingSenderId: \"893196040077\",\n  appId: \"1:893196040077:web:75ee18b5d771028f616fc4\"\n}\n\nconst database = createFirebaseDbManager(firebaseConfig);\nconst scheduleManager = createScheduleManager(database);\n\nexport { scheduleManager };\n","import React, { useEffect, useState } from 'react';\nimport { Schedule } from '../types';\nimport { HomeScreen } from '../ui';\nimport { scheduleManager } from '../service';\n\nconst HomeScreenCreator = () => {\n  const [schedules, setSchedules] = useState<Schedule[]>([]);\n\n  useEffect(() => {\n    scheduleManager.onSchedulesChanged(setSchedules);\n  }, []);\n\n  return <HomeScreen schedules={schedules} />;\n};\n\nexport default HomeScreenCreator;\n","import React, { useEffect, useState } from 'react';\n\nimport { AdminScreen } from '../ui';\nimport { scheduleManager } from '../service';\nimport { Schedule, DataFrame } from '../types';\n\nconst AdminScreenCreator = () => {\n  const [currentSchedules, setCurrentSchedules] = useState<Schedule[]>([]);\n\n  const [scheduleData, setScheduleData] = useState<DataFrame>(undefined);\n  const [scheduleTitle, setScheduleTitle] = useState<string>('');\n  const [scheduleLogo, setScheduleLogo] = useState<string>(undefined);\n\n  useEffect(() => {\n    scheduleManager.onSchedulesChanged(setCurrentSchedules);\n  }, []);\n\n  const uploadSchedule = () => {\n    if (!scheduleData) {\n      return alert('Please upload a spreadsheet first');\n    }\n    if (!scheduleTitle) {\n      return alert('Please enter the title of this table');\n    }\n\n    scheduleManager.addSchedule({\n      title: scheduleTitle,\n      rows: scheduleData,\n      logo: scheduleLogo,\n    });\n  };\n\n  const removeSchedule = _id => {\n    return scheduleManager.removeSchedule(_id);\n  };\n\n  return (\n    <AdminScreen\n      schedules={currentSchedules}\n      onNewScheduleTitleSet={setScheduleTitle}\n      onNewScheduleDataSet={setScheduleData}\n      onNewScheduleLogoSet={setScheduleLogo}\n      onUploadBtnPressed={uploadSchedule}\n      onScheduleDelete={removeSchedule}\n    />\n  );\n};\n\nexport default AdminScreenCreator;\n","import React from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\n\nimport { HomeScreenCreator, AdminScreenCreator } from './factory';\n\nconst AppNavigator = () => (\n  <HashRouter>\n    <Route exact path=\"/\" component={HomeScreenCreator} />\n    <Route exact path=\"/admin\" component={AdminScreenCreator} />\n  </HashRouter>\n);\n\nexport default AppNavigator;\n","import React from 'react';\n\nimport AppNavigator from './AppNavigator';\nimport SCALogo from './ui/assets/SCALogo.png';\n\nconst App = () => (\n  <>\n    <header className=\"navbar fixed-top bg-light shadow\">\n      <img className=\"navbar-brand py-0\" src={SCALogo} alt=\"SCA\" height=\"60\" />\n      <h5 className=\"w-100 text-center header-title m-0\">\n        Zoom Class Schedules:\n      </h5>\n    </header>\n    <div className=\"header-spacing\"></div>\n    <AppNavigator />\n  </>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './ui/styles.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}